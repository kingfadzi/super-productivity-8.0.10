{"version":3,"file":"reminder.d44ab4085f820754.js","mappings":"mBAMA,IAAIA,EAEJC,iBAAiB,UAAW,EAAGC,WAE7BC,EAAoBD,EAAD,GAGrB,MAAMC,EAAuBC,IACvBJ,IACFA,IACAA,OAAsBK,GAEnBD,GAAcA,EAAUE,SAI7BN,ECpB6B,EAC7BO,EACAC,KAEA,IAAIC,EAEJ,MAAMC,EAAW,KACfD,EAAgBE,WAAWD,ED2B1BE,KC1BDL,EAAKM,KAAK,KAAV,EAGFJ,SAAgBE,WAAWD,EDuBxBE,KCrBI,KACLE,aAAaL,EAAD,CACb,EDKqBM,CAAgB,KACpC,MAAMC,EAAeC,EAAgBb,GACrC,GAAIY,EAAaV,OAAQ,CACvB,MAAMY,EAASF,EAAa,GAEtBG,EACY,SAAhBD,EAAOE,KACHJ,EAAaK,OAAQC,GAAiB,SAAXA,EAAEF,MAE7B,CAACF,GAEPK,YAAYJ,GACZK,QAAQC,IAAI,qBAAsBN,EACnC,IAbkC,EAiBjCF,EAAmBb,IACvB,MAAMsB,EAAMC,KAAKD,MACjB,OAAOtB,EACJiB,OAAQO,GAAaA,EAASC,SAAWH,GACzCI,KAAK,CAACC,EAAGC,IAAMD,EAAEF,SAAWG,EAAEH,SAF1B","names":["cancelCheckInterval","addEventListener","data","reInitCheckInterval","reminders","undefined","length","func","intervalDuration","lastTimeoutId","interval","setTimeout","CHECK_INTERVAL_DURATION","call","clearTimeout","lazySetInterval","dueReminders","getDueReminders","oldest","remindersToSend","type","filter","r","postMessage","console","log","now","Date","reminder","remindAt","sort","a","b"],"sourceRoot":"webpack:///","sources":["./src/app/features/reminder/reminder.worker.ts","./electron/shared-with-frontend/lazy-set-interval.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\nimport { ReminderCopy } from './reminder.model';\nimport { lazySetInterval } from '../../../../electron/shared-with-frontend/lazy-set-interval';\n\nconst CHECK_INTERVAL_DURATION = 10000;\nlet cancelCheckInterval: (() => void) | undefined;\n\naddEventListener('message', ({ data }) => {\n  // console.log('REMINDER WORKER', data);\n  reInitCheckInterval(data);\n});\n\nconst reInitCheckInterval = (reminders: ReminderCopy[]): void => {\n  if (cancelCheckInterval) {\n    cancelCheckInterval();\n    cancelCheckInterval = undefined;\n  }\n  if (!reminders || !reminders.length) {\n    return;\n  }\n\n  cancelCheckInterval = lazySetInterval(() => {\n    const dueReminders = getDueReminders(reminders);\n    if (dueReminders.length) {\n      const oldest = dueReminders[0];\n\n      const remindersToSend =\n        oldest.type === 'TASK'\n          ? dueReminders.filter((r) => r.type === 'TASK')\n          : // NOTE: for notes we just send the oldest due reminder\n            [oldest];\n\n      postMessage(remindersToSend);\n      console.log('Worker postMessage', remindersToSend);\n    }\n  }, CHECK_INTERVAL_DURATION);\n};\n\nconst getDueReminders = (reminders: ReminderCopy[]): ReminderCopy[] => {\n  const now = Date.now();\n  return reminders\n    .filter((reminder) => reminder.remindAt < now)\n    .sort((a, b) => a.remindAt - b.remindAt);\n};\n","// avoids the performance issues caused by normal set interval, when the user\n// is not at the computer for some time\nexport const lazySetInterval = (\n  func: () => void,\n  intervalDuration: number,\n): (() => void) => {\n  let lastTimeoutId: any;\n\n  const interval = (): void => {\n    lastTimeoutId = setTimeout(interval, intervalDuration);\n    func.call(null);\n  };\n\n  lastTimeoutId = setTimeout(interval, intervalDuration);\n\n  return () => {\n    clearTimeout(lastTimeoutId);\n  };\n};\n"],"x_google_ignoreList":[]}