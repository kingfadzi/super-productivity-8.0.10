{"version":3,"sources":["./node_modules/@fontsource/roboto/400.css","./node_modules/@fontsource/roboto/400-italic.css","./node_modules/@fontsource/roboto/700.css","./node_modules/@fontsource/roboto/300.css","./src/styles/font/material-icons.scss","./src/styles.scss","./node_modules/angular-material-css-vars/src/lib/_internal-helper.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/core/typography/_typography.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/bottom-sheet/_bottom-sheet-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/expansion/_expansion-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-legacy-theme.scss","./node_modules/@angular/material/form-field/_form-field-fill-theme.scss","./node_modules/@angular/material/form-field/_form-field-outline-theme.scss","./node_modules/@angular/material/grid-list/_grid-list-theme.scss","./node_modules/@angular/material/core/style/_list-common.scss","./node_modules/@angular/material/input/_input-theme.scss","./node_modules/@angular/material/menu/_menu-theme.scss","./node_modules/@angular/material/paginator/_paginator-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/option/_optgroup-theme.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/focus-indicators/_private.scss","./node_modules/@angular/material/core/style/_layout-common.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/core/style/_elevation.scss","./node_modules/@angular/material/autocomplete/_autocomplete-theme.scss","./node_modules/@angular/material/button-toggle/_button-toggle-theme.scss","./node_modules/@angular/material/divider/_divider-theme.scss","./node_modules/@angular/material/expansion/_expansion-mixins.scss","./node_modules/@angular/material/core/style/_form-common.scss","./node_modules/@angular/material/form-field/_form-field-standard-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/core/style/_vendor-prefixes.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/sidenav/_sidenav-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/angular-material-css-vars/src/lib/_variables.scss","./node_modules/angular-material-css-vars/src/lib/_mat-lib-overwrites.scss","./node_modules/angular-material-css-vars/src/lib/_public-util.scss","./src/styles/themes.scss","./src/_variables.scss","./src/styles/page.scss","./src/styles/mixins/_media-queries.scss","./src/styles/util.scss","./src/styles/components/dragula.scss","./src/styles/components/scrollbars.scss","./src/styles/components/table.scss","./src/styles/config/_shadows.scss","./src/styles/components/pyro.scss","./src/styles/components/markdown.scss","./src/styles/mixins/_scroll.scss","./src/styles/components/backdrop.scss","./src/styles/mixins/_theming.scss","./src/styles/components/formly-rows.scss","./src/styles/components/native-datepicker.scss","./src/styles/components/issue-table.scss","./src/styles/components/enlarge-img.scss","./src/styles/components/date-time-picker-schedule.scss","./src/styles/components/_overwrite-material.scss","./src/styles/components/promise-btn.scss","./src/styles/components/global-error-alert.scss","./src/styles/components/wrap-buttons.scss","./src/styles/components/shepherd.scss"],"sourcesContent":["/* roboto-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-cyrillic-ext-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n/* roboto-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-cyrillic-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;\n}\n/* roboto-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-greek-ext-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* roboto-greek-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-greek-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* roboto-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-vietnamese-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;\n}\n/* roboto-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-latin-ext-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n/* roboto-latin-400-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-latin-400-normal.woff2') format('woff2'), url('./files/roboto-all-400-normal.woff') format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}\n","/* roboto-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-cyrillic-ext-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n/* roboto-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-cyrillic-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;\n}\n/* roboto-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-greek-ext-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* roboto-greek-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-greek-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* roboto-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-vietnamese-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;\n}\n/* roboto-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-latin-ext-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n/* roboto-latin-400-italic*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/roboto-latin-400-italic.woff2') format('woff2'), url('./files/roboto-all-400-italic.woff') format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}\n","/* roboto-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-cyrillic-ext-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n/* roboto-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-cyrillic-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;\n}\n/* roboto-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-greek-ext-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* roboto-greek-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-greek-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* roboto-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-vietnamese-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;\n}\n/* roboto-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-latin-ext-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n/* roboto-latin-700-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/roboto-latin-700-normal.woff2') format('woff2'), url('./files/roboto-all-700-normal.woff') format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}\n","/* roboto-cyrillic-ext-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-cyrillic-ext-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n/* roboto-cyrillic-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-cyrillic-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;\n}\n/* roboto-greek-ext-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-greek-ext-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* roboto-greek-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-greek-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* roboto-vietnamese-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-vietnamese-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;\n}\n/* roboto-latin-ext-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-latin-ext-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n/* roboto-latin-300-normal*/\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 300;\n  src: url('./files/roboto-latin-300-normal.woff2') format('woff2'), url('./files/roboto-all-300-normal.woff') format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}\n","// Download from:\n// https://github.com/google/material-design-icons/tree/master/font\n\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Material Icons'), local('MaterialIcons-Regular'),\n    url('../../assets/fonts/MaterialIcons-Regular.ttf') format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px; /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n","@import '../node_modules/@fontsource/roboto/400.css';\n@import '../node_modules/@fontsource/roboto/400-italic.css';\n@import '../node_modules/@fontsource/roboto/700.css';\n@import '../node_modules/@fontsource/roboto/300.css';\n@import 'styles/font/material-icons';\n\n@import '_variables';\n@import 'styles/themes';\n@import 'styles/page';\n@import 'styles/util';\n@import 'styles/components/components';\n\n* {\n  //box-shadow: none !important;\n  user-select: none;\n  -webkit-touch-callout: none;\n}\n\np,\ninput,\ntextarea,\npre,\n[contenteditable] {\n  user-select: text;\n  -webkit-touch-callout: default;\n}\n\nbody.isDisableAnimations {\n  *,\n  *:after,\n  *:before {\n    transition: none !important;\n    animation: none !important;\n  }\n}\n","// used to circumvent node sass issue: https://github.com/sass/node-sass/issues/2251\n@function _mat-css-rgb($r, $g: null, $b: null ) {\n  @if ($g == null) {\n    @return unquote('#{$r}');\n  }\n\n  @if ($g and $b) {\n    @return unquote('#{$r}, #{$g}, #{$b}');\n  }\n\n  @error \"wrong number of arguments\";\n}\n\n// used to circumvent node sass issue: https://github.com/sass/node-sass/issues/2251\n@function _mat-css-rgba($r, $g, $b: null, $a: null ) {\n  @if ($b == null) {\n    @return unquote('#{$r}, #{$g}');\n  }\n\n  @if ($b and $a) {\n    @return unquote('#{$r}, #{$g}, #{$b}, #{$a}');\n  }\n\n  @error \"wrong number of arguments\";\n}\n\n@function _mat-css-str-replace($string, $search, $replace: '') {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + _mat-css-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n@function _mat-css-hex-to-rgb($color) {\n  @if ($color == null) {\n    @return null;\n  }\n  @return red($color), green($color), blue($color);\n}\n\n@function _mat-css-hex-to-rgba($color) {\n  @if ($color == null) {\n    @return null;\n  }\n  @return red($color), green($color), blue($color), alpha($color);\n}\n\n@mixin _mat-css-root($varMap: null) {\n  @at-root :root {\n    @each $varName, $varValue in $varMap {\n      @if (type_of($varValue)==string) {\n        #{$varName}: $varValue // to prevent quotes interpolation\n      } @else {\n        #{$varName}: #{$varValue}\n      }\n    }\n  }\n}\n\n@function _mat-css-strip-variable($color) {\n  $var: $color;\n  @if (str-index($var, 'rgba(')) {\n    $var: _mat-css-str-replace($var, 'rgba(', '');\n  }\n  @if (str-index($var, 'rgb(')) {\n    $var: _mat-css-str-replace($var, 'rgb(', '');\n  }\n  @if (str-index($var, 'var(')) {\n    $var: _mat-css-str-replace($var, ')', ''); // remove excess \")\"\n    $var: $var + ')';\n  }\n  @return $var;\n}","// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:math';\n@use '@angular/cdk';\n\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n$_badge-structure-emitted: false !default;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: math.div(-$size, 2);\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: math.div(-$size, 2);\n      }\n    }\n  }\n  // stylelint-enable\n}\n\n// Structural styles for the badge. They have to be included as a part of the theme,\n// because the badge is a directive and we have no other way of attaching styles to it.\n@mixin _badge-structure {\n  .mat-badge {\n    position: relative;\n  }\n\n  // The badge should make sure its host is overflow visible so that the badge content\n  // can be rendered outside of the element. Some components such as <mat-icon> explicitly\n  // style `overflow: hidden` so this requires extra specificity so that it does not\n  // depend on style load order.\n  .mat-badge.mat-badge {\n    overflow: visible;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size);\n  }\n\n  .mat-badge-medium {\n    @include _badge-size($default-size);\n  }\n\n  .mat-badge-large {\n    @include _badge-size($large-size);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $primary: map.get($config, primary);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-badge-content {\n    color: theming.get-color-from-palette($primary, default-contrast);\n    background: theming.get-color-from-palette($primary);\n\n    @include cdk.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: theming.get-color-from-palette($accent);\n      color: theming.get-color-from-palette($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: theming.get-color-from-palette($warn, default-contrast);\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: theming.get-color-from-palette($background, 'background');\n      $badge-color: theming.get-color-from-palette($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (meta.type-of($badge-color) == color and meta.type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: color.mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-badge-content {\n    font-weight: $font-weight;\n    font-size: $font-size;\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $font-size * 2;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    // Try to reduce the number of times that the structural styles are emitted.\n    @if not $_badge-structure-emitted {\n      @include _badge-structure;\n\n      // Only flip the flag if the mixin is included at the top level. Otherwise the first\n      // inclusion might be inside of a theme class which will exclude the structural styles\n      // from all other themes.\n      @if not & {\n        $_badge-structure-emitted: true !global;\n      }\n    }\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'typography-utils';\n@use '../theming/theming';\n\n/// Defines a typography level from the Material Design spec.\n/// @param {String} $font-size The font-size for this level.\n/// @param {String | Number} $line-height The line-height for this level.\n/// @param {String | Number} $font-weight The font-weight for this level.\n/// @param {String} $font-family The font-family for this level.\n/// @param {String} $letter-spacing The letter-spacing for this level.\n/// @returns {Map} A map representing the definition of this typographic level.\n@function define-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n/// Defines a collection of typography levels to configure typography for an application.\n/// Any level not specified defaults to the values defined in the Material Design specification:\n/// https://material.io/guidelines/style/typography.html.\n///\n/// Note that the Material Design specification does not describe explicit letter-spacing values.\n/// The values here come from reverse engineering the Material Design examples.\n/// @param {String} $font-family Default font-family for levels that don't specify font-family.\n/// @param {Map} $display-4 Configuration for the \"display-4\" typographic level.\n/// @param {Map} $display-3 Configuration for the \"display-3\" typographic level.\n/// @param {Map} $display-2 Configuration for the \"display-2\" typographic level.\n/// @param {Map} $display-1 Configuration for the \"display-1\" typographic level.\n/// @param {Map} $headline Configuration for the \"headline\" typographic level.\n/// @param {Map} $title Configuration for the \"title\" typographic level.\n/// @param {Map} $subheading-2 Configuration for the \"subheading-2\" typographic level.\n/// @param {Map} $subheading-1 Configuration for the \"subheading-1\" typographic level.\n/// @param {Map} $body-2 Configuration for the \"body-2\" typographic level.\n/// @param {Map} $body-1 Configuration for the \"body-1\" typographic level.\n/// @param {Map} $caption Configuration for the \"caption\" typographic level.\n/// @param {Map} $button Configuration for the \"button\" typographic level.\n/// @param {Map} $input Configuration for the \"input\" typographic level.\n/// @returns {Map} A typography config for the application.\n@function define-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     define-typography-level(34px, 40px, 400),\n  $headline:      define-typography-level(24px, 32px, 400),\n  $title:         define-typography-level(20px, 32px, 500),\n  $subheading-2:  define-typography-level(16px, 28px, 400),\n  $subheading-1:  define-typography-level(15px, 24px, 400),\n  $body-2:        define-typography-level(14px, 24px, 500),\n  $body-1:        define-typography-level(14px, 20px, 400),\n  $caption:       define-typography-level(12px, 20px, 400),\n  $button:        define-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         define-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map.get($level, font-family) == null {\n      $new-level: map.merge($level, (font-family: $font-family));\n      $config: map.merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map.merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function private-typography-is-2018-config($config) {\n  @return map.get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function private-typography-is-2014-config($config) {\n  @return map.get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n//\n// Components using this function should be migrated to normalize to the 2018 style config instead.\n// New components should not use this function.\n@function private-typography-to-2014-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2014-config($config) {\n    $args: (\n        display-4: map.get($config, headline-1),\n        display-3: map.get($config, headline-2),\n        display-2: map.get($config, headline-3),\n        display-1: map.get($config, headline-4),\n        headline: map.get($config, headline-5),\n        title: map.get($config, headline-6),\n        subheading-2: map.get($config, subtitle-1),\n        subheading-1: map.get($config, subtitle-2),\n        body-2: map.get($config, body-1),\n        body-1: map.get($config, body-2),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n    );\n    $non-null-args: ();\n    @each $key, $value in $args {\n      @if $value != null {\n        $non-null-args: map.merge($non-null-args, ($key: $value));\n      }\n    }\n    @return define-typography-config($non-null-args...);\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function private-typography-to-2018-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2018-config($config) {\n    @return (\n        headline-1: map.get($config, display-4),\n        headline-2: map.get($config, display-3),\n        headline-3: map.get($config, display-2),\n        headline-4: map.get($config, display-1),\n        headline-5: map.get($config, headline),\n        headline-6: map.get($config, title),\n        subtitle-1: map.get($config, subheading-2),\n\n        // These mappings are odd, but body-2 in the 2014 system actually looks closer to subtitle-2\n        // in the 2018 system, and subeading-1 in the 2014 system looks more like body-1 in the 2018\n        // system.\n        subtitle-2: map.get($config, body-2),\n        body-1: map.get($config, subheading-1),\n\n        body-2: map.get($config, body-1),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n        overline: if(map.get($config, overline), map.get($config, overline),\n            define-typography-level(12px, 32px, 500)\n        )\n    );\n  }\n  @return $config;\n}\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin typography-hierarchy($config-or-theme, $selector: '.mat-typography') {\n  $config: private-typography-to-2014-config(theming.get-typography-config($config-or-theme));\n\n  // Note that it seems redundant to prefix the class rules with the `$selector`, however it's\n  // necessary if we want to allow people to overwrite the tag selectors. This is due to\n  // selectors like `#{$selector} h1` being more specific than ones like `.mat-title`.\n  .mat-h1,\n  .mat-headline,\n  #{$selector} .mat-h1,\n  #{$selector} .mat-headline,\n  #{$selector} h1 {\n    @include typography-utils.typography-level($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2,\n  .mat-title,\n  #{$selector} .mat-h2,\n  #{$selector} .mat-title,\n  #{$selector} h2 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3,\n  .mat-subheading-2,\n  #{$selector} .mat-h3,\n  #{$selector} .mat-subheading-2,\n  #{$selector} h3 {\n    @include typography-utils.typography-level($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4,\n  .mat-subheading-1,\n  #{$selector} .mat-h4,\n  #{$selector} .mat-subheading-1,\n  #{$selector} h4 {\n    @include typography-utils.typography-level($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5,\n  #{$selector} .mat-h5,\n  #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.83),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6,\n  #{$selector} .mat-h6,\n  #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.67),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong,\n  .mat-body-2,\n  #{$selector} .mat-body-strong,\n  #{$selector} .mat-body-2 {\n    @include typography-utils.typography-level($config, body-2);\n  }\n\n  .mat-body,\n  .mat-body-1,\n  #{$selector} .mat-body,\n  #{$selector} .mat-body-1,\n  #{$selector} {\n    @include typography-utils.typography-level($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small,\n  .mat-caption,\n  #{$selector} .mat-small,\n  #{$selector} .mat-caption {\n    @include typography-utils.typography-level($config, caption);\n  }\n\n  .mat-display-4,\n  #{$selector} .mat-display-4 {\n    @include typography-utils.typography-level($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3,\n  #{$selector} .mat-display-3 {\n    @include typography-utils.typography-level($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2,\n  #{$selector} .mat-display-2 {\n    @include typography-utils.typography-level($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1,\n  #{$selector} .mat-display-1 {\n    @include typography-utils.typography-level($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'sass:string';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes.\n    font: $font-weight list.slash($font-size, $line-height) $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  $font-size: font-size($config, $level);\n  $font-weight: font-weight($config, $level);\n  $line-height: line-height($config, $level);\n  $font-family: font-family($config, $level);\n\n  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: letter-spacing($config, $level);\n}\n\n/// Coerce a value to `em` if it is a unitless number, otherwise returns\n/// the value provided.\n@function private-coerce-unitless-to-em($value) {\n  @return if(math.is-unitless($value), 1em * $value, $value);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include private.private-theme-elevation(16, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-bottom-sheet-container {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$_ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _focus-overlay-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $hue, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _ripple-color($theme, $hue, $opacity: $_ripple-opacity) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _theme-property($theme, $property, $hue) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: theming.get-color-from-palette($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: theming.get-color-from-palette($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: theming.get-color-from-palette($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: theming.get-color-from-palette($palette, disabled-button);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _theme-property($config, 'color', text);\n    @include _focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map.get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: theming.get-color-from-palette($foreground, text);\n    background-color: theming.get-color-from-palette($background, raised-button);\n\n    @include _theme-property($config, 'color', default-contrast);\n    @include _theme-property($config, 'background-color', default);\n    @include _ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include private.private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include private.private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include private.private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-card {\n    @include private.private-theme-overridable-elevation(1, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-card {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: typography-utils.font-size($config, headline);\n      weight: typography-utils.font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: typography-utils.font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: theming.get-color-from-palette($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: theming.get-color-from-palette($foreground, disabled);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map.get(map.get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-checkbox {\n    font-family: typography-utils.font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: typography-utils.line-height($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$chip-remove-font-size: 18px;\n\n@mixin _element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  @include _element-color(theming.get-color-from-palette($palette, default-contrast),\n    theming.get-color-from-palette($palette));\n\n  .mat-ripple-element {\n    @include _ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $unselected-background: theming.get-color-from-palette($background, unselected-chip);\n  $unselected-foreground: theming.get-color-from-palette($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include private.private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map.get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-chip {\n    font-size: typography-utils.font-size($config, body-2);\n    font-weight: typography-utils.font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-table {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-table {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: typography-utils.font-size($config, caption);\n    font-weight: typography-utils.font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _color($palette) {\n  @include date-range-colors(\n    theming.get-color-from-palette($palette, default, $range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: theming.get-color-from-palette($palette);\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: theming.get-color-from-palette($palette);\n\n    @if (meta.type-of($background) == color) {\n      background-color: color.adjust($background, $alpha: -$selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $selected-today-box-shadow-width\n                theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    @include _highlighted-cell($palette);\n  }\n\n  @media (hover: hover) {\n    .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover {\n      @include _highlighted-cell($palette);\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n// Styles for a highlighted calendar cell (e.g. hovered or focused).\n@mixin _highlighted-cell($palette) {\n  & > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      background-color: theming.get-color-from-palette($palette, 0.3);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    fill: theming.get-color-from-palette($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-calendar-table-header,\n  .mat-calendar-body-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: theming.get-color-from-palette($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: theming.get-color-from-palette($foreground, divider);\n\n    @if meta.type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, math.min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _unselected-cell {\n      $color: theming.get-color-from-palette($foreground, hint-text);\n\n      @if (meta.type-of($color) == color) {\n        border-color: color.adjust($color, $alpha: -$today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _color(map.get($config, primary));\n\n  .mat-datepicker-content {\n    @include private.private-theme-elevation(4, $config);\n    background-color: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-accent {\n      @include _color(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _color(map.get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include private.private-theme-elevation(24, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: theming.get-color-from-palette(map.get($config, primary), text);\n\n    &.mat-accent {\n      color: theming.get-color-from-palette(map.get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette(map.get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-calendar {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $calendar-weekday-table-font-size;\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-dialog-container {\n    @include private.private-theme-elevation(24, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-dialog-title {\n    @include typography-utils.typography-level($config, title);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './expansion-variables';\n@use './expansion-mixins';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-expansion-panel {\n    @include private.private-theme-overridable-elevation(2, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  @include expansion-mixins.private-expansion-focus {\n    background: theming.get-color-from-palette($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: theming.get-color-from-palette($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-expansion-panel-header {\n    font: {\n      family: typography-utils.font-family($config, subheading-1);\n      size: typography-utils.font-size($config, subheading-1);\n      weight: typography-utils.font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $expanded-height: compatibility.private-density-prop-value(\n        expansion-variables.$header-density-config, $density-scale, expanded-height);\n  $collapsed-height: compatibility.private-density-prop-value(\n      expansion-variables.$header-density-config, $density-scale, collapsed-height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-expansion') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@use './form-field-fill-theme.scss';\n@use './form-field-legacy-theme.scss';\n@use './form-field-outline-theme.scss';\n@use './form-field-standard-theme.scss';\n\n// Color styles that apply to all appearances of the form-field.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color:\n    theming.get-color-from-palette($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: theming.get-color-from-palette($primary, text);\n  $required-label-color: theming.get-color-from-palette($accent, text);\n\n  // Underline colors.\n  $underline-color-base:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: theming.get-color-from-palette($accent, text);\n  $underline-color-warn: theming.get-color-from-palette($warn, text);\n  $underline-focused-color: theming.get-color-from-palette($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include form-field-legacy-theme.legacy-color($config);\n  @include form-field-standard-theme.standard-color($config);\n  @include form-field-fill-theme.fill-color($config);\n  @include form-field-outline-theme.outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $dedupe;\n\n  $dedupe: $dedupe + 0.00001 !global;\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top: $subscript-font-scale *\n      typography-utils.private-coerce-unitless-to-em($line-height);\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include typography-utils.typography-level($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: typography-utils.private-coerce-unitless-to-em($line-height);\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n  }\n\n  @include form-field-legacy-theme.legacy-typography($config);\n  @include form-field-standard-theme.standard-typography($config);\n  @include form-field-fill-theme.fill-typography($config);\n  @include form-field-outline-theme.outline-typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-legacy-theme.private-form-field-legacy-density($density-scale);\n  @include form-field-standard-theme.private-form-field-standard-density($density-scale);\n  @include form-field-fill-theme.private-form-field-fill-density($density-scale);\n  @include form-field-outline-theme.private-form-field-outline-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin legacy-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-color: theming.get-color-from-palette($foreground, secondary-text);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $legacy-dedupe);\n  width: math.div(100%, $font-scale) + $legacy-dedupe;\n\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n@mixin legacy-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale) - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin private-form-field-legacy-density($config-or-theme) {}\n\n@mixin legacy-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include legacy-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include legacy-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin fill-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $fill-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $fill-dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $fill-dedupe;\n\n  $fill-dedupe: $fill-dedupe + 0.00001 !global;\n}\n\n@mixin fill-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-fill-density($config-or-theme) {}\n\n@mixin fill-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include fill-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include fill-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin outline-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n  $outline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: theming.get-color-from-palette($primary);\n  $outline-color-accent: theming.get-color-from-palette($accent);\n  $outline-color-warn: theming.get-color-from-palette($warn);\n  $outline-color-disabled:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $outline-dedupe)\n  scale($font-scale);\n  width: math.div(100%, $font-scale) + $outline-dedupe;\n\n  $outline-dedupe: $outline-dedupe + 0.00001 !global;\n}\n\n@mixin outline-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-outline-density($config-or-theme) {}\n\n@mixin outline-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include outline-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include outline-typography($typography);\n    }\n  }\n}\n\n","@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin color($config-or-theme) {}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include list-common.base(typography-utils.font-size($config, caption));\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin base($secondary-font-size) {\n  .mat-line {\n    @include truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin wrapper-base() {\n  @include normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/vendor-prefixes';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: theming.get-color-from-palette($primary, text);\n\n    @include vendor-prefixes.input-placeholder {\n      color: form-common.private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map.get($config, is-dark)) {\n      &:not(.mat-native-select-inline) {\n        option {\n          color: palette.$dark-primary-text;\n        }\n\n        option:disabled {\n          color: palette.$dark-disabled-text;\n        }\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: theming.get-color-from-palette($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: typography-utils.private-coerce-unitless-to-em(-$line-spacing);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-menu-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: theming.get-color-from-palette($foreground, 'text');\n\n    &[disabled] {\n      &,\n      .mat-menu-submenu-icon,\n      .mat-icon-no-color {\n        color: theming.get-color-from-palette($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-submenu-icon {\n    color: theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-menu-item {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './paginator-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-paginator {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n    border-right: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: theming.get-color-from-palette($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: typography-utils.font-family($config, caption);\n      size: typography-utils.font-size($config, caption);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(paginator-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-select-value {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: form-common.private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: theming.get-color-from-palette($background, card);\n    @include private.private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: theming.get-color-from-palette($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: theming.get-color-from-palette($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: theming.get-color-from-palette($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  .mat-select {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: typography-utils.private-coerce-unitless-to-em($line-height);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: theming.get-color-from-palette($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $mat-slider-off-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-off-focused-color: theming.get-color-from-palette($foreground, slider-off-active);\n  $mat-slider-disabled-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color:\n    theming.get-color-from-palette($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color:\n    theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color:\n    theming.get-color-from-palette($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-slider {\n    &.mat-primary {\n      @include _inner-content-theme($primary);\n    }\n\n    &.mat-accent {\n      @include _inner-content-theme($accent);\n    }\n\n    &.mat-warn {\n      @include _inner-content-theme($warn);\n    }\n  }\n\n  .mat-slider:hover,\n  .mat-slider.cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider.mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider.mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: theming.get-color-from-palette($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (meta.type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slider-thumb-label-text {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, caption);\n      weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover:not([aria-disabled]),\n    &:hover[aria-disabled='false'] {\n      background-color: theming.get-color-from-palette($background, hover);\n    }\n\n    &:hover[aria-disabled='true'] {\n      cursor: default;\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: theming.get-color-from-palette($foreground, secondary-text);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: theming.get-color-from-palette($primary);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($accent);\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($warn);\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: theming.get-color-from-palette($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: typography-utils.font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: typography-utils.font-size($config, body-2);\n      weight: typography-utils.font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: math.div($height - stepper-variables.$label-header-height, 2);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding stepper-variables.$side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: stepper-variables.$line-gap - $vertical-padding;\n      bottom: stepper-variables.$line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $header-border: 1px solid theming.get-color-from-palette($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] > .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _label-focus-color($color);\n        @include _ink-bar-color($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _ink-bar-color($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _label-focus-color($color);\n        @include _tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _ink-bar-color($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: theming.get-color-from-palette($color, $hue);\n  }\n}\n\n@mixin _label-focus-color($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: theming.get-color-from-palette($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: theming.get-color-from-palette($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: theming.get-color-from-palette($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-link-container .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: theming.get-color-from-palette($background-color, default-contrast);\n  }\n\n  > .mat-tab-header .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    border-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.4;\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element,\n  > .mat-tab-header-pagination .mat-ripple-element {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    background-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.12;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tab-group {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/style/variables';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './toolbar-variables';\n\n@mixin _height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  background: theming.get-color-from-palette($palette);\n  color: theming.get-color-from-palette($palette, default-contrast);\n}\n\n@mixin _form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-toolbar {\n    background: theming.get-color-from-palette($background, app-bar);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    @include _form-field-overrides;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0;\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height-desktop: compatibility.private-density-prop-value(\n      toolbar-variables.$desktop-density-config, $density-scale, height);\n  $height-mobile: compatibility.private-density-prop-value(\n      toolbar-variables.$mobile-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media (variables.$xsmall) {\n      @include _height($height-mobile);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$target-height: 22px;\n$font-size: 10px;\n$vertical-padding: math.div($target-height - $font-size, 2);\n\n$handset-target-height: 30px;\n$handset-font-size: 14px;\n$handset-vertical-padding: math.div($handset-target-height - $handset-font-size, 2);\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n\n  .mat-tooltip {\n    background: theming.get-color-from-palette($background, tooltip, 0.9);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tooltip {\n    font-family: typography-utils.font-family($config);\n    font-size: $font-size;\n    padding-top: $vertical-padding;\n    padding-bottom: $vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $handset-font-size;\n    padding-top: $handset-vertical-padding;\n    padding-bottom: $handset-vertical-padding;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-list-option {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-subheader {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-list-item-disabled {\n      background-color: theming.get-color-from-palette($background, disabled-list-option);\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  $font-family: typography-utils.font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: typography-utils.font-family($config, body-2);\n      font-size: typography-utils.font-size($config, body-2);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: typography-utils.font-size($config, caption);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-option {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    &.mat-active {\n      background: theming.get-color-from-palette($background, hover);\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-option {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-optgroup-label {\n    @include typography-utils.typography-level($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n@use '../core/theming/palette';\n@use '../core/style/private';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $accent: map.get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, palette.$dark-primary-text, palette.$light-secondary-text);\n    background: if($is-dark-theme, map.get(palette.$grey-palette, 50), #323232);\n\n    @include private.private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, theming.get-color-from-palette($accent, text));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-simple-snackbar {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '@angular/cdk';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use 'sass:map';\n@use '@angular/cdk';\n@use '../style/layout-common';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n","// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n    &::after {\n      color: theming.get-color-from-palette($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{elevation.$prefix}#{$zValue} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include ripple-theme.theme($theme);\n    @include option-theme.theme($theme);\n    @include optgroup-theme.theme($theme);\n    @include pseudo-checkbox-theme.theme($theme);\n\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: variables.$fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin elevation($zValue, $color: $color, $opacity: $opacity) {\n  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map.get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin overridable-elevation(\n    $zValue,\n    $color: $color,\n    $opacity: $opacity) {\n  &:not([class*='#{$prefix}']) {\n    @include elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function private-transition-property-value(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin elevation-transition(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  transition: private-transition-property-value($duration, $easing);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-autocomplete-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: theming.get-color-from-palette($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: theming.get-color-from-palette($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './button-toggle-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $divider-color: theming.get-color-from-palette($foreground, divider);\n  $theme-divider-color: map.get($foreground, divider);\n\n  // By default the theme usually has an rgba color for the dividers, which can\n  // stack up with the background of a button toggle. This can cause the border\n  // of a selected toggle to look different from an deselected one. We use a solid\n  // color to ensure that the border always stays the same.\n  $divider-color: if(type-of($theme-divider-color) == color,\n    theming.private-rgba-to-hex($theme-divider-color, map.get($background, card)),\n    $theme-divider-color\n  );\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include private.private-theme-overridable-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    &:not([class*='mat-elevation-z']) {\n      box-shadow: none;\n    }\n  }\n\n  .mat-button-toggle {\n    color: theming.get-color-from-palette($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: theming.get-color-from-palette($foreground, text);\n    background: theming.get-color-from-palette($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: theming.get-color-from-palette($background, selected-button);\n    color: theming.get-color-from-palette($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n    background-color: theming.get-color-from-palette($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: theming.get-color-from-palette($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: theming.get-color-from-palette($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button-toggle {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $standard-height: compatibility.private-density-prop-value(\n      button-toggle-variables.$standard-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-divider {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@mixin private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function private-control-placeholder-color($config) {\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  @return theming.get-color-from-palette($foreground, secondary-text,\n    if($is-dark-theme, 0.5, 0.42));\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin standard-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin standard-typography($config-or-theme) {}\n\n@mixin private-form-field-standard-density($config-or-theme) {}\n\n@mixin standard-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include standard-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include standard-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: theming.get-color-from-palette($primary, text);\n    }\n\n    &.mat-accent {\n      color: theming.get-color-from-palette($accent, text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","// stylelint-disable material/no-prefixes\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  // Note: this isn't necessary anymore since we don't support\n  // IE, but it caused some presubmit failures in #23416.\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin color-adjust($value) {\n  -webkit-print-color-adjust: $value;\n  color-adjust: $value;\n}\n\n@mixin private-background-clip($value) {\n  -webkit-background-clip: $value;\n  background-clip: $value;\n}\n\n@mixin clip-path($value) {\n  -webkit-clip-path: $value;\n  clip-path: $value;\n}\n// stylelint-enable\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use '../core/theming/theming';\n\n// Approximates the correct buffer color by using a mix between the theme color\n// and the theme's background color.\n@function _get-buffer-color($theme, $background) {\n  $theme-color: theming.get-color-from-palette($theme);\n  // Return fallback color if the theme uses variables to define colors.\n  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {\n    @return theming.get-color-from-palette($theme, lighter);\n  }\n  @return color.mix($theme-color, $background, $weight: 25%);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get(map.get($config, background), background);\n\n  .mat-progress-bar-background {\n    fill: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: theming.get-color-from-palette($palette);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _color($primary);\n    }\n\n    &.mat-accent {\n      @include _color($accent);\n    }\n\n    &.mat-warn {\n      @include _color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: theming.get-color-from-palette($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map.get($foreground, base);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-radio-button {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $drawer-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-container-background-color:  theming.get-color-from-palette($background, background);\n  $drawer-push-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-side-border: solid 1px theming.get-color-from-palette($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include private.private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: theming.get-color-from-palette($background, card, $opacity);\n\n    @if (meta.type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: color.invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: theming.get-color-from-palette($foreground, disabled);\n  $ripple-unchecked-color: theming.get-color-from-palette($foreground, base);\n\n  .mat-slide-toggle {\n    @include _checked-color($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _checked-color($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _checked-color($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include private.private-theme-elevation(1, $config);\n    background-color: theming.get-color-from-palette(palette.$grey-palette, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slide-toggle-content {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use '@angular/material'as mat;\n@import '@angular/material/theming';\n@import 'internal-helper';\n\n$mat-css-dark-theme-selector: '.isDarkTheme' !default;\n$mat-css-light-theme-selector: '.isLightTheme' !default;\n\n$dark-primary-text: rgba(0, 0, 0, 0.87);\n$dark-secondary-text: rgba(0, 0, 0, 0.54);\n$dark-disabled-text: rgba(0, 0, 0, 0.38);\n$dark-dividers: rgba(0, 0, 0, 0.12);\n$dark-focused: rgba(0, 0, 0, 0.12);\n$light-primary-text: rgba(255, 255, 255, 1);\n$light-secondary-text: rgba(255, 255, 255, 0.7);\n$light-disabled-text: rgba(255, 255, 255, 0.5);\n$light-dividers: rgba(255, 255, 255, 0.12);\n$light-focused: rgba(255, 255, 255, 0.12);\n\n$mat-css-default-foreground: (\n  // LIGHT\n  --palette-foreground-base: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-divider: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-divider-alpha: 0.12,\n  --palette-foreground-dividers: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-dividers-alpha: 0.12,\n  --palette-foreground-disabled: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-disabled-alpha: 0.38,\n  --palette-foreground-disabled-button: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-disabled-button-alpha: 0.26,\n  --palette-foreground-disabled-text: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-disabled-text-alpha: 0.38,\n  // --palette-foreground-elevation: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-hint-text: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-hint-text-alpha: 0.38,\n  --palette-foreground-secondary-text: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-secondary-text-alpha: 0.54,\n  --palette-foreground-icon: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-icon-alpha: 0.54,\n  --palette-foreground-icons: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-icons-alpha: 0.54,\n  --palette-foreground-text: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-text-alpha: 0.87,\n  --palette-foreground-slider-min: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-slider-min-alpha: 0.87,\n  --palette-foreground-slider-off: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-slider-off-alpha: 0.26,\n  --palette-foreground-slider-off-active: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-slider-off-active-alpha: 0.38,\n  // DARK\n  --palette-foreground-base-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-divider-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-divider-dark-alpha: 0.12,\n  --palette-foreground-dividers-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-dividers-dark-alpha: 0.12,\n  --palette-foreground-disabled-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-disabled-dark-alpha: 0.5,\n  --palette-foreground-disabled-button-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-disabled-button-dark-alpha: 0.3,\n  --palette-foreground-disabled-text-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-disabled-text-dark-alpha: 0.5,\n  // --palette-foreground-elevation-dark: _mat-css-hex-to-rgb(#000000),\n  --palette-foreground-hint-text-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-hint-text-dark-alpha: 0.5,\n  --palette-foreground-secondary-text-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-secondary-text-dark-alpha: 0.7,\n  --palette-foreground-icon-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-icon-dark-alpha: 1,\n  --palette-foreground-icons-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-icons-dark-alpha: 1,\n  --palette-foreground-text-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-text-dark-alpha: 1,\n  --palette-foreground-slider-min-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-slider-min-dark-alpha: 1,\n  --palette-foreground-slider-off-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-slider-off-dark-alpha: 0.3,\n  --palette-foreground-slider-off-active-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-foreground-slider-off-active-dark-alpha: 0.38\n) !default;\n\n$mat-css-default-background: (\n  // LIGHT\n  --palette-background-status-bar: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 300)),\n  --palette-background-app-bar: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 100)),\n  --palette-background-background: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 50)),\n  --palette-background-hover: _mat-css-hex-to-rgb(#000000),\n  --palette-background-hover-alpha: 0.04,\n  --palette-background-card: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-dialog: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-disabled-button: _mat-css-hex-to-rgb(#000000),\n  --palette-background-disabled-button-alpha: 0.12,\n  --palette-background-raised-button: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-focused-button: _mat-css-hex-to-rgb(#000000),\n  --palette-background-focused-button-alpha: 0.12,\n  --palette-background-selected-button: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 300)),\n  --palette-background-selected-disabled-button: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 400)),\n  --palette-background-disabled-button-toggle: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 200)),\n  --palette-background-unselected-chip: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 300)),\n  --palette-background-disabled-list-option: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 200)),\n  --palette-background-tooltip: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 700)),\n  // DARK\n  --palette-background-status-bar-dark: _mat-css-hex-to-rgb(#000),\n  --palette-background-app-bar-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 900)),\n  --palette-background-background-dark: _mat-css-hex-to-rgb(#303030),\n  --palette-background-hover-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-hover-dark-alpha: 0.04,\n  --palette-background-card-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 800)),\n  --palette-background-dialog-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 800)),\n  --palette-background-disabled-button-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-disabled-button-dark-alpha: 0.12,\n  --palette-background-raised-button-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 800)),\n  --palette-background-focused-button-dark: _mat-css-hex-to-rgb(#ffffff),\n  --palette-background-focused-button-dark-alpha: 0.12,\n  --palette-background-selected-button-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 900)),\n  --palette-background-selected-disabled-button-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 800)),\n  --palette-background-disabled-button-toggle-dark: _mat-css-hex-to-rgb(#000000),\n  --palette-background-unselected-chip-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 700)),\n  --palette-background-disabled-list-option-dark: _mat-css-hex-to-rgb(#000000),\n  --palette-background-tooltip-dark: _mat-css-hex-to-rgb(map_get(mat.$grey-palette, 700))\n) !default;\n\n$mat-css-text: map-merge(\n    map-merge(\n        (--dark-primary-text: _mat-css-hex-to-rgba($dark-primary-text),\n          --dark-secondary-text: _mat-css-hex-to-rgba($dark-secondary-text),\n          --dark-accent-text: _mat-css-hex-to-rgba($dark-primary-text),\n          --dark-warn-text: _mat-css-hex-to-rgba($dark-primary-text),\n          --dark-disabled-text: _mat-css-hex-to-rgba($dark-disabled-text),\n          --dark-dividers: _mat-css-hex-to-rgba($dark-dividers),\n          --dark-focused: _mat-css-hex-to-rgba($dark-focused),\n          --light-primary-text: _mat-css-hex-to-rgba($light-primary-text),\n          --light-secondary-text: _mat-css-hex-to-rgba($light-secondary-text),\n          --light-accent-text: _mat-css-hex-to-rgba($light-primary-text),\n          --light-warn-text: _mat-css-hex-to-rgba($light-primary-text),\n          --light-disabled-text: _mat-css-hex-to-rgba($light-disabled-text),\n          --light-dividers: _mat-css-hex-to-rgba($light-dividers),\n          --light-focused: _mat-css-hex-to-rgba($light-focused)),\n        $mat-css-default-background\n    ),\n    $mat-css-default-foreground) !default;\n\n$mat-css-default-light-theme: (\n  // PRIMARY\n  --palette-primary-50: _mat-css-hex-to-rgb(#e1f5fe),\n  --palette-primary-100: _mat-css-hex-to-rgb(#b3e5fc), //lighter\n  --palette-primary-200: _mat-css-hex-to-rgb(#81d4fa),\n  --palette-primary-300: _mat-css-hex-to-rgb(#4fc3f7),\n  --palette-primary-400: _mat-css-hex-to-rgb(#29b6f6),\n  --palette-primary-500: _mat-css-hex-to-rgb(#03a9f4), //default\n  --palette-primary-600: _mat-css-hex-to-rgb(#039be5),\n  --palette-primary-700: _mat-css-hex-to-rgb(#0288d1), //darker\n  --palette-primary-800: _mat-css-hex-to-rgb(#0277bd),\n  --palette-primary-900: _mat-css-hex-to-rgb(#01579b),\n  --palette-primary-A100: _mat-css-hex-to-rgb(#80d8ff),\n  --palette-primary-A200: _mat-css-hex-to-rgb(#40c4ff),\n  --palette-primary-A400: _mat-css-hex-to-rgb(#00b0ff),\n  --palette-primary-A700: _mat-css-hex-to-rgb(#0091ea),\n  --palette-primary-contrast-50: var(--dark-primary-text),\n  --palette-primary-contrast-100: var(--dark-primary-text),\n  --palette-primary-contrast-200: var(--dark-primary-text),\n  --palette-primary-contrast-300: var(--dark-primary-text),\n  --palette-primary-contrast-400: var(--dark-primary-text),\n  --palette-primary-contrast-500: var(--light-primary-text),\n  --palette-primary-contrast-600: var(--light-primary-text),\n  --palette-primary-contrast-700: var(--light-primary-text),\n  --palette-primary-contrast-800: var(--light-primary-text),\n  --palette-primary-contrast-900: var(--light-primary-text),\n  --palette-primary-contrast-A100: var(--light-primary-text),\n  --palette-primary-contrast-A200: var(--light-primary-text),\n  --palette-primary-contrast-A400: var(--light-primary-text),\n  --palette-primary-contrast-A700: var(--light-primary-text),\n  // ACCENT\n  --palette-accent-50: _mat-css-hex-to-rgb(#fce4ec),\n  --palette-accent-100: _mat-css-hex-to-rgb(#f8bbd0),\n  --palette-accent-200: _mat-css-hex-to-rgb(#f48fb1),\n  --palette-accent-300: _mat-css-hex-to-rgb(#f06292),\n  --palette-accent-400: _mat-css-hex-to-rgb(#ec407a),\n  --palette-accent-500: _mat-css-hex-to-rgb(#e91e63),\n  --palette-accent-600: _mat-css-hex-to-rgb(#d81b60),\n  --palette-accent-700: _mat-css-hex-to-rgb(#c2185b),\n  --palette-accent-800: _mat-css-hex-to-rgb(#ad1457),\n  --palette-accent-900: _mat-css-hex-to-rgb(#880e4f),\n  --palette-accent-A100: _mat-css-hex-to-rgb(#ff80ab), //lighter\n  --palette-accent-A200: _mat-css-hex-to-rgb(#ff4081), //default\n  --palette-accent-A400: _mat-css-hex-to-rgb(#f50057), //darker\n  --palette-accent-A700: _mat-css-hex-to-rgb(#c51162),\n  --palette-accent-contrast-50: var(--dark-accent-text),\n  --palette-accent-contrast-100: var(--dark-accent-text),\n  --palette-accent-contrast-200: var(--dark-accent-text),\n  --palette-accent-contrast-300: var(--dark-accent-text),\n  --palette-accent-contrast-400: var(--dark-accent-text),\n  --palette-accent-contrast-500: var(--light-accent-text),\n  --palette-accent-contrast-600: var(--light-accent-text),\n  --palette-accent-contrast-700: var(--light-accent-text),\n  --palette-accent-contrast-800: var(--light-accent-text),\n  --palette-accent-contrast-900: var(--light-accent-text),\n  --palette-accent-contrast-A100: var(--light-accent-text),\n  --palette-accent-contrast-A200: var(--light-accent-text),\n  --palette-accent-contrast-A400: var(--light-accent-text),\n  --palette-accent-contrast-A700: var(--light-accent-text),\n  // WARN\n  --palette-warn-50: _mat-css-hex-to-rgb(#ffebee),\n  --palette-warn-100: _mat-css-hex-to-rgb(#ffcdd2),\n  --palette-warn-200: _mat-css-hex-to-rgb(#ef9a9a),\n  --palette-warn-300: _mat-css-hex-to-rgb(#e57373),\n  --palette-warn-400: _mat-css-hex-to-rgb(#ef5350),\n  --palette-warn-500: _mat-css-hex-to-rgb(#f44336),\n  --palette-warn-600: _mat-css-hex-to-rgb(#e53935),\n  --palette-warn-700: _mat-css-hex-to-rgb(#d32f2f),\n  --palette-warn-800: _mat-css-hex-to-rgb(#c62828),\n  --palette-warn-900: _mat-css-hex-to-rgb(#b71c1c),\n  --palette-warn-A100: _mat-css-hex-to-rgb(#ff8a80),\n  --palette-warn-A200: _mat-css-hex-to-rgb(#ff5252),\n  --palette-warn-A400: _mat-css-hex-to-rgb(#ff1744),\n  --palette-warn-A700: _mat-css-hex-to-rgb(#d50000),\n  --palette-warn-contrast-50: var(--dark-warn-text),\n  --palette-warn-contrast-100: var(--dark-warn-text),\n  --palette-warn-contrast-200: var(--dark-warn-text),\n  --palette-warn-contrast-300: var(--dark-warn-text),\n  --palette-warn-contrast-400: var(--dark-warn-text),\n  --palette-warn-contrast-500: var(--light-warn-text),\n  --palette-warn-contrast-600: var(--light-warn-text),\n  --palette-warn-contrast-700: var(--light-warn-text),\n  --palette-warn-contrast-800: var(--light-warn-text),\n  --palette-warn-contrast-900: var(--light-warn-text),\n  --palette-warn-contrast-A100: var(--light-warn-text),\n  --palette-warn-contrast-A200: var(--light-warn-text),\n  --palette-warn-contrast-A400: var(--light-warn-text),\n  --palette-warn-contrast-A700: var(--light-warn-text),\n) !default;\n\n$mat-css-palette-primary: (\n  50: rgb(var(--palette-primary-50)),\n  100: rgb(var(--palette-primary-100)),\n  200: rgb(var(--palette-primary-200)),\n  300: rgb(var(--palette-primary-300)),\n  400: rgb(var(--palette-primary-400)),\n  500: rgb(var(--palette-primary-500)),\n  600: rgb(var(--palette-primary-600)),\n  700: rgb(var(--palette-primary-700)),\n  800: rgb(var(--palette-primary-800)),\n  900: rgb(var(--palette-primary-900)),\n  A100: rgb(var(--palette-primary-A100)),\n  A200: rgb(var(--palette-primary-A200)),\n  A400: rgb(var(--palette-primary-A400)),\n  A700: rgb(var(--palette-primary-A700)),\n  contrast: (\n    50: rgba(var(--palette-primary-contrast-50)),\n    100: rgba(var(--palette-primary-contrast-100)),\n    200: rgba(var(--palette-primary-contrast-200)),\n    300: rgba(var(--palette-primary-contrast-300)),\n    400: rgba(var(--palette-primary-contrast-400)),\n    500: rgba(var(--palette-primary-contrast-500)),\n    600: rgba(var(--palette-primary-contrast-600)),\n    700: rgba(var(--palette-primary-contrast-700)),\n    800: rgba(var(--palette-primary-contrast-800)),\n    900: rgba(var(--palette-primary-contrast-900)),\n    A100: rgba(var(--palette-primary-contrast-A100)),\n    A200: rgba(var(--palette-primary-contrast-A200)),\n    A400: rgba(var(--palette-primary-contrast-A400)),\n    A700: rgba(var(--palette-primary-contrast-A700)),\n  )\n) !default;\n\n$mat-css-palette-accent: (\n  50: rgb(var(--palette-accent-50)),\n  100: rgb(var(--palette-accent-100)),\n  200: rgb(var(--palette-accent-200)),\n  300: rgb(var(--palette-accent-300)),\n  400: rgb(var(--palette-accent-400)),\n  500: rgb(var(--palette-accent-500)),\n  600: rgb(var(--palette-accent-600)),\n  700: rgb(var(--palette-accent-700)),\n  800: rgb(var(--palette-accent-800)),\n  900: rgb(var(--palette-accent-900)),\n  A100: rgb(var(--palette-accent-A100)),\n  A200: rgb(var(--palette-accent-A200)),\n  A400: rgb(var(--palette-accent-A400)),\n  A700: rgb(var(--palette-accent-A700)),\n  contrast: (\n    50: rgba(var(--palette-accent-contrast-50)),\n    100: rgba(var(--palette-accent-contrast-100)),\n    200: rgba(var(--palette-accent-contrast-200)),\n    300: rgba(var(--palette-accent-contrast-300)),\n    400: rgba(var(--palette-accent-contrast-400)),\n    500: rgba(var(--palette-accent-contrast-500)),\n    600: rgba(var(--palette-accent-contrast-600)),\n    700: rgba(var(--palette-accent-contrast-700)),\n    800: rgba(var(--palette-accent-contrast-800)),\n    900: rgba(var(--palette-accent-contrast-900)),\n    A100: rgba(var(--palette-accent-contrast-A100)),\n    A200: rgba(var(--palette-accent-contrast-A200)),\n    A400: rgba(var(--palette-accent-contrast-A400)),\n    A700: rgba(var(--palette-accent-contrast-A700)),\n  )\n) !default;\n\n$mat-css-palette-warn: (\n  50: rgb(var(--palette-warn-50)),\n  100: rgb(var(--palette-warn-100)),\n  200: rgb(var(--palette-warn-200)),\n  300: rgb(var(--palette-warn-300)),\n  400: rgb(var(--palette-warn-400)),\n  500: rgb(var(--palette-warn-500)),\n  600: rgb(var(--palette-warn-600)),\n  700: rgb(var(--palette-warn-700)),\n  800: rgb(var(--palette-warn-800)),\n  900: rgb(var(--palette-warn-900)),\n  A100: rgb(var(--palette-warn-A100)),\n  A200: rgb(var(--palette-warn-A200)),\n  A400: rgb(var(--palette-warn-A400)),\n  A700: rgb(var(--palette-warn-A700)),\n  contrast: (\n    50: rgba(var(--palette-warn-contrast-50)),\n    100: rgba(var(--palette-warn-contrast-100)),\n    200: rgba(var(--palette-warn-contrast-200)),\n    300: rgba(var(--palette-warn-contrast-300)),\n    400: rgba(var(--palette-warn-contrast-400)),\n    500: rgba(var(--palette-warn-contrast-500)),\n    600: rgba(var(--palette-warn-contrast-600)),\n    700: rgba(var(--palette-warn-contrast-700)),\n    800: rgba(var(--palette-warn-contrast-800)),\n    900: rgba(var(--palette-warn-contrast-900)),\n    A100: rgba(var(--palette-warn-contrast-A100)),\n    A200: rgba(var(--palette-warn-contrast-A200)),\n    A400: rgba(var(--palette-warn-contrast-A400)),\n    A700: rgba(var(--palette-warn-contrast-A700)),\n  )\n) !default;\n\n$mat-css-contrast-palette: map_get($mat-css-palette-primary, 'contrast') !default;\n$mat-css-contrast-palette-accent: map_get($mat-css-palette-accent, 'contrast') !default;\n$mat-css-contrast-palette-warn: map_get($mat-css-palette-warn, 'contrast') !default;\n\n// Background palette for light themes.\n$mat-css-palette-background: (\n  status-bar: rgb(var(--palette-background-status-bar)),\n  app-bar: rgb(var(--palette-background-app-bar)),\n  background: rgb(var(--palette-background-background)),\n  hover: rgba(var(--palette-background-hover), var(--palette-background-hover-alpha)),\n  card: rgb(var(--palette-background-card)),\n  dialog: rgb(var(--palette-background-dialog)),\n  disabled-button: rgba(var(--palette-background-disabled-button), var(--palette-background-disabled-button-alpha)),\n  raised-button: rgb(var(--palette-background-raised-button)),\n  focused-button: rgba(var(--palette-background-focused-button), var(--palette-background-focused-button-alpha)),\n  selected-button: rgb(var(--palette-background-selected-button)),\n  selected-disabled-button: rgb(var(--palette-background-selected-disabled-button)),\n  disabled-button-toggle: rgb(var(--palette-background-disabled-button-toggle)),\n  unselected-chip: rgb(var(--palette-background-unselected-chip)),\n  disabled-list-option: rgb(var(--palette-background-disabled-list-option)),\n  tooltip: rgb(var(--palette-background-tooltip)),\n) !default;\n\n// Background palette for dark themes.\n$mat-css-palette-background-dark: (\n  status-bar: rgb(var(--palette-background-status-bar-dark)),\n  app-bar: rgb(var(--palette-background-app-bar-dark)),\n  background: rgb(var(--palette-background-background-dark)),\n  hover: rgba(var(--palette-background-hover-dark), var(--palette-background-hover-dark-alpha)),\n  card: rgb(var(--palette-background-card-dark)),\n  dialog: rgb(var(--palette-background-dialog-dark)),\n  disabled-button: rgba(var(--palette-background-disabled-button-dark), var(--palette-background-disabled-button-dark-alpha)),\n  raised-button: rgb(var(--palette-background-raised-button-dark)),\n  focused-button: rgba(var(--palette-background-focused-button-dark), var(--palette-background-focused-button-dark-alpha)),\n  selected-button: rgb(var(--palette-background-selected-button-dark)),\n  selected-disabled-button: rgb(var(--palette-background-selected-disabled-button-dark)),\n  disabled-button-toggle: rgb(var(--palette-background-disabled-button-toggle-dark)),\n  unselected-chip: rgb(var(--palette-background-unselected-chip-dark)),\n  disabled-list-option: rgb(var(--palette-background-disabled-list-option-dark)),\n  tooltip: rgb(var(--palette-background-tooltip-dark)),\n) !default;\n\n// Foreground palette for light themes.\n$mat-css-palette-foreground: (\n  base: black, //rgb(var(--palette-foreground-base)),\n  divider: rgba(var(--palette-foreground-divider), var(--palette-foreground-divider-alpha)),\n  dividers: rgba(var(--palette-foreground-dividers), var(--palette-foreground-dividers-alpha)),\n  disabled: rgba(var(--palette-foreground-disabled), var(--palette-foreground-disabled-alpha)),\n  disabled-button: rgba(var(--palette-foreground-disabled-button), var(--palette-foreground-disabled-button-alpha)),\n  disabled-text: rgba(var(--palette-foreground-disabled-text), var(--palette-foreground-disabled-text-alpha)),\n  elevation: black, //rgb(var(--palette-foreground-elevation)),\n  hint-text: rgba(var(--palette-foreground-hint-text), var(--palette-foreground-hint-text-alpha)),\n  secondary-text: rgba(var(--palette-foreground-secondary-text), var(--palette-foreground-secondary-text-alpha)),\n  icon: rgba(var(--palette-foreground-icon), var(--palette-foreground-icon-alpha)),\n  icons: rgba(var(--palette-foreground-icons), var(--palette-foreground-icons-alpha)),\n  text: rgba(var(--palette-foreground-text), var(--palette-foreground-text-alpha)),\n  slider-min: rgba(var(--palette-foreground-slider-min), var(--palette-foreground-slider-min-alpha)),\n  slider-off: rgba(var(--palette-foreground-slider-off), var(--palette-foreground-slider-off-alpha)),\n  slider-off-active: rgba(var(--palette-foreground-slider-off-active), var(--palette-foreground-slider-off-active-alpha)),\n) !default;\n\n// Foreground palette for dark themes.\n$mat-css-palette-foreground-dark: (\n  base: white, //rgb(var(--palette-foreground-base-dark)),\n  divider: rgba(var(--palette-foreground-divider-dark), var(--palette-foreground-divider-dark-alpha)),\n  dividers: rgba(var(--palette-foreground-dividers-dark), var(--palette-foreground-dividers-dark-alpha)),\n  disabled: rgba(var(--palette-foreground-disabled-dark), var(--palette-foreground-disabled-dark-alpha)),\n  disabled-button: rgba(var(--palette-foreground-disabled-button-dark), var(--palette-foreground-disabled-button-dark-alpha)),\n  disabled-text: rgba(var(--palette-foreground-disabled-text-dark), var(--palette-foreground-disabled-text-dark-alpha)),\n  elevation: black, //rgb(var(--palette-foreground-elevation-dark)),\n  hint-text: rgba(var(--palette-foreground-hint-text-dark), var(--palette-foreground-hint-text-dark-alpha)),\n  secondary-text: rgba(var(--palette-foreground-secondary-text-dark), var(--palette-foreground-secondary-text-dark-alpha)),\n  icon: rgba(var(--palette-foreground-icon-dark), var(--palette-foreground-icon-dark-alpha)),\n  icons: rgba(var(--palette-foreground-icons-dark), var(--palette-foreground-icons-dark-alpha)),\n  text: rgba(var(--palette-foreground-text-dark), var(--palette-foreground-text-dark-alpha)),\n  slider-min: rgba(var(--palette-foreground-slider-min-dark), var(--palette-foreground-slider-min-dark-alpha)),\n  slider-off: rgba(var(--palette-foreground-slider-off-dark), var(--palette-foreground-slider-off-dark-alpha)),\n  slider-off-active: rgba(var(--palette-foreground-slider-off-active-dark), var(--palette-foreground-slider-off-active-dark-alpha)),\n) !default;\n","// main overwrite to make it all work\n@function get-color-from-palette($palette, $hue: default, $opacity: null) {\n\n  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {\n    @return get-color-from-palette($palette, default, $hue);\n  }\n\n  $color: map-get($palette, $hue);\n\n  @if type-of($color) == color {\n    $alpha: if($opacity == null, alpha($color), if($opacity != 1, $opacity, alpha($color)));\n    @return rgba(red($color), green($color), blue($color), $alpha);\n  }\n\n  // at this point we have a variable\n  // strip out color functions so we can return proper rgba value\n  $color: _mat-css-strip-variable($color);\n\n  // contrast color variables are defined as rgba\n  @if (str-index($color, '-contrast-')) {\n    @return rgba($color);\n  }\n\n  // non contrast variables are defined as rgb, so add alpha\n  @return rgba($color, if($opacity == null, 1, $opacity));\n}\n\n// apply additional overwrites\n@mixin mat-css-other-overwrites {\n  @include _mat-date-picker-content-overwrites();\n  @include _mat-checkbox-overwrites();\n  @include _mat-slide-toggle-color-overwrites();\n}\n\n// Fix issue with date picker contrast and hover colors\n// Account for primary, accent, and warn palettes.\n@mixin _mat-date-picker-content-overwrites {\n  .mat-datepicker-content {\n    $accent: $mat-css-palette-accent;\n    $primary: $mat-css-palette-primary;\n    $warn: $mat-css-palette-warn;\n    @include _mat-date-picker-color-overwrites($primary, 500);\n\n    &.mat-accent {\n      @include _mat-date-picker-color-overwrites($accent, 500);\n    }\n\n    &.mat-warn {\n      @include _mat-date-picker-color-overwrites($warn, 500);\n    }\n  }\n}\n\n@mixin _mat-date-picker-color-overwrites($palette, $hue) {\n  .mat-calendar-body-in-range::before {\n    background: get-color-from-palette($palette, $hue, 0.2);\n    @include mat-css-dark-theme-global() {\n      background: get-color-from-palette($palette, $hue, 0.2);\n    }\n  }\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content {\n      &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n        background-color: get-color-from-palette($palette, $hue, 0.3);\n        @include mat-css-dark-theme-global() {\n          background-color: get-color-from-palette($palette, $hue, 0.3);\n        }\n      }\n    }\n  }\n}\n\n// Fix a problem where the foreground color for the checkmark doesn't reflect\n// the correct contrast color.\n@mixin _mat-checkbox-overwrites {\n\n  // -- Primary Color\n  .mat-checkbox.mat-primary,\n  .mat-checkbox.mat-primary {\n    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {\n      stroke: mat-css-contrast-color-primary(500) !important;\n    }\n\n    .mat-checkbox-mixedmark {\n      background-color: mat-css-contrast-color-primary(500) !important;\n    }\n  }\n  // -- Accent Color\n  .mat-checkbox.mat-accent,\n  .mat-checkbox.mat-accent {\n    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {\n      stroke: mat-css-contrast-color-accent(500) !important;\n    }\n\n    .mat-checkbox-mixedmark {\n      background-color: mat-css-contrast-color-accent(500) !important;\n    }\n  }\n  // -- Warning Color\n  .mat-checkbox.mat-warn,\n  .mat-checkbox.mat-warn {\n    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {\n      stroke: mat-css-contrast-color-warn(500) !important;\n    }\n\n    .mat-checkbox-mixedmark {\n      background-color: mat-css-contrast-color-warn(500) !important;\n    }\n  }\n}\n\n// Since we cannot override angulars namespace,\n// target the style and overwrite it with the proper attributes.\n@mixin _mat-slide-toggle-color-overwrites() {\n  $thumb-checked-hue: 500;\n  $accent: $mat-css-palette-accent;\n  $primary: $mat-css-palette-primary;\n  $warn: $mat-css-palette-warn;\n  .mat-slide-toggle {\n    @include _mat-slide-toggle-checked-color-theme($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _mat-slide-toggle-checked-color-theme($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _mat-slide-toggle-checked-color-theme($warn, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin _mat-slide-toggle-checked-color-theme($palette, $thumb-checked-hue) {\n  @include mat-css-dark-theme-global() {\n    @include _mat-slide-toggle-checked-color($palette, $thumb-checked-hue)\n  }\n  @include mat-css-light-theme-global() {\n    @include _mat-slide-toggle-checked-color($palette, $thumb-checked-hue)\n  }\n}\n\n@mixin _mat-slide-toggle-checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      background-color: get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      background-color: get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n","@import 'variables';\n@import 'internal-helper';\n\n// Utility mixins for the public\n\n// colors\n// ------\n@function mat-css-color($hue: 500,  $opacity: null, $palette: 'primary', $is-contrast-color: false) {\n  $palette_: $mat-css-palette-primary;\n  @if ($is-contrast-color == true) {\n    @if ($palette=='primary') {\n      $palette_: $mat-css-contrast-palette;\n    } @else if ($palette=='accent') {\n      $palette_: $mat-css-contrast-palette-accent;\n    } @else if ($palette=='warn') {\n      $palette_: $mat-css-contrast-palette-warn;\n    } @else {\n      @error 'Invalid contrast palette';\n    }\n  } @else {\n    @if ($palette=='primary') {\n      $palette_: $mat-css-palette-primary;\n    } @else if ($palette=='accent') {\n      $palette_: $mat-css-palette-accent;\n    } @else if ($palette=='warn') {\n      $palette_: $mat-css-palette-warn;\n    } @else {\n      @error 'Invalid palette';\n    }\n  }\n\n  $color: _mat-css-strip-variable(map_get($palette_, $hue));\n\n  @if (type-of($opacity) == number) {\n    @return rgba($color, $opacity);\n  } @else {\n    @return rgb($color);\n  }\n\n}\n\n@function mat-css-color-primary($hue: 500,  $opacity: null) {\n  @return mat-css-color($hue, $opacity, 'primary');\n}\n\n@function mat-css-color-accent($hue: 500,  $opacity: null) {\n  @return mat-css-color($hue, $opacity, 'accent');\n}\n\n@function mat-css-color-warn($hue: 500,  $opacity: null) {\n  @return mat-css-color($hue, $opacity, 'warn');\n}\n\n// contrast-colors\n// ---------------\n@function mat-css-contrast-color($hue: 500,  $opacity: null, $palette: 'primary') {\n  @return mat-css-color($hue, $opacity, $palette, true);\n}\n\n@function mat-css-contrast-color-primary($hue: 500,  $opacity: null) {\n  @return mat-css-contrast-color($hue, $opacity, 'primary');\n}\n\n@function mat-css-contrast-color-accent($hue: 500,  $opacity: null) {\n  @return mat-css-contrast-color($hue, $opacity, 'accent');\n}\n\n@function mat-css-contrast-color-warn($hue: 500,  $opacity: null) {\n  @return mat-css-contrast-color($hue, $opacity, 'warn');\n}\n\n// mixins\n// ------\n@mixin mat-css-color-and-contrast($hue) {\n  @warn 'mat-css-color-and-contrast() is deprecated. Please use mat-css-color-and-contrast-primary() instead.';\n  @include mat-css-color-and-contrast-primary($hue);\n}\n\n@mixin mat-css-color-and-contrast-primary($hue) {\n  background: mat-css-color-primary($hue);\n  color: mat-css-contrast-color($hue);\n}\n\n@mixin mat-css-color-and-contrast-accent($hue) {\n  background: mat-css-color-accent($hue);\n  color: mat-css-contrast-color-accent($hue);\n}\n\n@mixin mat-css-color-and-contrast-warn($hue) {\n  background: mat-css-color-warn($hue);\n  color: mat-css-contrast-color-warn($hue);\n}\n\n@mixin mat-css-bg($hue) {\n  background: mat-css-color-primary($hue);\n}\n\n@mixin mat-css-dark-theme {\n  :host-context(#{$mat-css-dark-theme-selector}) & {\n    @content;\n  }\n}\n\n@mixin mat-css-light-theme {\n  :host-context(#{$mat-css-light-theme-selector}) & {\n    @content;\n  }\n}\n\n@mixin mat-css-dark-theme-global {\n  #{$mat-css-dark-theme-selector} & {\n    @content;\n  }\n}\n\n@mixin mat-css-light-theme-global {\n  #{$mat-css-light-theme-selector} & {\n    @content;\n  }\n}\n\n@mixin mat-css-set-palette-defaults($css-var-map, $paletteType: 'primary') {\n  $new-map: ();\n  @each $var, $defaultVal in $css-var-map {\n    @if ($var != 'contrast') {\n      $colorVal: _mat-css-hex-to-rgb($defaultVal);\n      @if $colorVal != null {\n        $new-map: map_merge($new-map, (--palette-#{$paletteType}-#{$var}: #{$colorVal}));\n      }\n    }\n  }\n}\n\n","@use '@angular/material' as mat;\n@import '~angular-material-css-vars/src/lib/public-util';\n@import '~angular-material-css-vars/src/lib/main';\n\n$custom-typography: mat.define-typography-config(\n  $font-family: null,\n);\n@include init-material-css-vars($typography-config: $custom-typography);\n\n.bg-card {\n  background: #fff;\n\n  .isDarkTheme & {\n    background: $dark-theme-card-bg;\n  }\n}\n\n.bg-primary {\n  background-color: $c-primary;\n}\n\n.bgc-primary {\n  @include mat-css-color-and-contrast-primary(500);\n}\n\n.bg-accent {\n  background-color: $c-accent;\n}\n\n.bgc-accent {\n  @include mat-css-color-and-contrast-accent(500);\n}\n\n.bg-100 {\n  background-color: $c-primary-100;\n}\n\n.bg-200 {\n  background-color: $c-primary-200;\n}\n\n.bg-400 {\n  background-color: $c-primary-400;\n}\n\n.bgc-400 {\n  @include mat-css-color-and-contrast-primary(400);\n}\n\n.bg-600 {\n  background-color: $c-primary-600;\n}\n\n.bgc-600 {\n  @include mat-css-color-and-contrast-primary(600);\n}\n\n.cc-600 {\n  color: $c-contrast-600;\n}\n\n.bg-600i {\n  background-color: $c-primary-600 !important;\n}\n\n.bgc-800 {\n  @include mat-css-color-and-contrast-primary(800);\n}\n\n// for buttons\n.isDarkTheme .mat-lighter,\n.mat-lighter {\n  @include mat-css-color-and-contrast-primary(300);\n}\n\n.isDarkTheme .mat-darker,\n.mat-darker {\n  @include mat-css-color-and-contrast-primary(600);\n}\n\n.color-contrast {\n  color: $c-contrast;\n}\n\n.color-primary {\n  color: $c-primary;\n  stroke: $c-primary;\n}\n\n.color-warn-i {\n  color: $c-warn !important;\n  stroke: $c-warn !important;\n}\n\n.border-color-primary {\n  border-color: $c-primary !important;\n}\n","@import 'styles/config/shadows';\n@import 'styles/functions/_ddivide';\n@import '~angular-material-css-vars/src/lib/public-util';\n\n$s: 8px;\n$card-border-radius: 4px;\n\n// COLORS\n// ------\n//| elevation | overlay |   hex   |\n//| --------- | ------- | ------- |\n//|   00dp    |    0%   | #121212 |\n//|   01dp    |    5%   | #1e1e1e |\n//|   02dp    |    7%   | #222222 |\n//|   03dp    |    8%   | #242424 |\n//|   04dp    |    9%   | #272727 |\n//|   06dp    |   11%   | #2c2c2c |\n//|   08dp    |   12%   | #2e2e2e |\n//|   12dp    |   14%   | #333333 |\n//|   16dp    |   15%   | #343434 |\n//|   24dp    |   16%   | #383838 |\n//$dark0: #121212;\n//$dark1: #1e1e1e;\n//$dark2: #222222;\n//$dark3: #242424;\n//$dark4: #272727;\n//$dark6: #2c2c2c;\n//$dark8: #2e2e2e;\n//$dark12: #333333;\n//$dark16: #343434;\n//$dark24: #383838;\n$dark0: rgb(18, 18, 18);\n$dark05: rgb(24, 24, 24);\n$dark1: rgb(30, 30, 30);\n$dark2: rgb(34, 34, 34);\n$dark3: rgb(36, 36, 36);\n$dark4: rgb(39, 39, 39);\n$dark6: rgb(44, 44, 44);\n$dark8: rgb(46, 46, 46);\n$dark12: rgb(51, 51, 51);\n$dark16: rgb(52, 52, 52);\n$dark24: rgb(56, 56, 56);\n\n$dark-theme-bg: $dark0;\n$dark-theme-bg-darker: $dark0;\n$dark-theme-bg-slightly-lighter: $dark4;\n$dark-theme-bg-lighter: $dark12;\n$dark-theme-bg-lightest: $dark24;\n$dark-theme-bg-super-light: #616161;\n\n$dark-theme-card-bg: $dark2;\n$dark-theme-sidebar-bg: $dark8;\n\n$light-theme-bg: rgb(250, 250, 250);\n$light-theme-bg-darker: rgb(235, 235, 235);\n\n$dark-theme-text-color: rgb(235, 235, 235);\n$dark-theme-text-color-less-intense: transparentize($dark-theme-text-color, 0.1);\n$dark-theme-text-color-muted: transparentize($dark-theme-text-color, 0.4);\n$dark-theme-text-color-more-intense: rgb(245, 245, 245);\n$dark-theme-text-color-most-intense: rgb(255, 255, 255);\n\n$light-theme-text-color: rgb(44, 44, 44);\n$light-theme-text-color-less-intense: transparentize($light-theme-text-color, 0.1);\n$light-theme-text-color-muted: transparentize($light-theme-text-color, 0.4);\n$light-theme-text-color-most-intense: rgb(0, 0, 0);\n\n$light-theme-selected-task-bg-color: mat-css-color-primary(100);\n$light-theme-selected-task-bg-color: #fff;\n$light-theme-extra-border-color: #dddddd;\n$dark-theme-extra-border-color: rgba(255, 255, 255, 0.12);\n\n$light-theme-separator-color: rgba(18, 18, 18, 0.3);\n$dark-theme-separator-color: rgba(255, 255, 255, 0.3);\n\n$c-accent: mat-css-color-accent();\n$c-warn: mat-css-color-warn();\n\n$c-primary: mat-css-color-primary();\n$c-primary-50: mat-css-color-primary(50);\n$c-primary-100: mat-css-color-primary(100);\n$c-primary-200: mat-css-color-primary(200);\n$c-primary-300: mat-css-color-primary(300);\n$c-primary-400: mat-css-color-primary(400);\n$c-primary-600: mat-css-color-primary(600);\n$c-primary-700: mat-css-color-primary(700);\n$c-primary-800: mat-css-color-primary(800);\n$c-primary-900: mat-css-color-primary(900);\n\n$c-contrast: mat-css-contrast-color();\n$c-contrast-600: mat-css-contrast-color(600);\n\n$c-focus-border: $c-primary-400;\n$c-backdrop-light-theme: rgba(0, 0, 0, 0.6);\n$c-backdrop-dark-theme: rgba(0, 0, 0, 0.6);\n\n$success-green: #4fa758;\n$yellow: #fff400; // for sun\n\n// LAYOUT\n// ------\n$layout-xxs: 440px;\n$layout-xs: 600px;\n$layout-sm: 960px;\n$layout-md: 1280px;\n$layout-lg: 1920px;\n$layout-xl: 2000px;\n\n$component-max-width: 800px;\n\n$side-nav-width-switch-l: 1500px;\n$side-nav-width: 200px;\n$side-nav-width-l: $side-nav-width * 2;\n//$main-header-height: $s*7;\n\n$bar-height-large: 56px;\n$bar-height: 48px;\n$bar-height-small: 40px;\n$mat-mini-fab-size: 48px;\n$mac-title-bar-padding: 20px;\n\n// INDEXES\n// -------\n$z-focus-mode-overlay: 101;\n$z-task-side-bar: 44;\n$z-task-side-bar-over: 100;\n$z-main-header-wrapper: 50;\n$z-side-nav: 60;\n$z-main-header: 10;\n$z-bookmarks: 9;\n$z-backdrop: 222;\n$z-add-task-bar: 10000;\n$z-search-bar: 10000;\n$z-tour: 10001;\n\n// COMPONENTS\n// ----------\n$standard-note-bg-light: #ffffff;\n$standard-note-fg-light: $light-theme-text-color;\n$standard-note-bg-dark: $dark-theme-bg-lighter;\n$standard-note-bg-dark-hovered: $dark-theme-bg-lightest;\n$standard-note-fg-dark: #eeeeee;\n\n// ANIMATIONS\n// ----------\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-animation/_variables.scss\n$ani-standard-timing: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$ani-enter-timing: cubic-bezier(0, 0, 0.2, 1) !default;\n$ani-leave-timing: cubic-bezier(0.4, 0, 1, 1) !default;\n$ani-sharp-timing: cubic-bezier(0.4, 0, 0.6, 1) !default;\n\n$ease-in-out-quint: cubic-bezier(0.38, 0.04, 0.35, 0.96);\n$transition-duration-xs: 90ms;\n$transition-duration-s: 150ms;\n$transition-duration-m: 225ms;\n$transition-duration-l: 375ms;\n\n$transition-duration--enter: $transition-duration-m;\n$transition-duration--leave: 195ms;\n\n$transition-enter: $transition-duration--enter $ani-enter-timing;\n$transition-leave: $transition-duration--leave $ani-leave-timing;\n$transition-standard: $transition-duration-m $ani-standard-timing;\n$transition-sharp: $transition-duration-m $ani-sharp-timing;\n$transition-slow: $transition-duration-l $ani-standard-timing;\n$transition-fast: $transition-duration-s $ani-standard-timing;\n$transition-ultra-fast: $transition-duration-xs $ani-standard-timing;\n\n$page-transition-duration: $transition-duration-m;\n\n@import 'styles/mixins/mixins';\n@import 'styles/extends/extends';\n","@import '../_variables.scss';\n\nhtml,\nbody,\napp-root,\n.app-frame {\n  overflow: hidden;\n  margin: 0;\n  height: 100%;\n  height: -webkit-fill-available;\n  box-sizing: border-box;\n  //font-family: 'Montserrat', 'Roboto', sans-serif;\n  //font-family: 'Open Sans', sans-serif;\n  //font-family: 'Roboto', sans-serif;\n  font-family: 'Roboto', 'Comic Sans MS';\n}\n\nhtml {\n  button,\n  a {\n    -webkit-app-region: no-drag !important;\n  }\n}\n\nbody {\n  // to fix older android web view\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n\n  &:before {\n    display: none;\n    transition: 1s opacity;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    pointer-events: none;\n    opacity: 0;\n  }\n\n  &.isEnabledBackgroundGradient {\n    &:before {\n      display: block;\n    }\n  }\n\n  &.isLightTheme {\n    color: $light-theme-text-color;\n\n    &.isDisableBackgroundGradient {\n      background: $light-theme-bg;\n    }\n\n    &:before {\n      opacity: 1;\n      filter: saturate(0.8);\n      background: linear-gradient(\n        180deg,\n        $c-primary-50 0,\n        $c-primary-100 85%,\n        $c-primary-200 100%\n      );\n    }\n  }\n\n  &.isDarkTheme {\n    color: $dark-theme-text-color;\n\n    &.isDisableBackgroundGradient {\n      background: $dark-theme-bg;\n    }\n\n    &:before {\n      opacity: 1;\n      filter: brightness(0.7) saturate(0.6);\n      background: linear-gradient(\n        180deg,\n        $dark-theme-bg 0,\n        $c-primary-900 20%,\n        $c-primary-800 50%,\n        $c-primary-700 100%\n      );\n      background: linear-gradient(\n        180deg,\n        $dark-theme-bg 0,\n        $c-primary-900 20%,\n        $c-primary-800 100%\n      );\n      //background: linear-gradient(180deg, $c-primary-700 0, $c-primary-800 20%, $c-primary-900 30%, $dark-theme-bg 100%);\n      //background: linear-gradient(180deg, $c-primary-900 0, $c-primary-800 80%, $c-primary-700 90%, $c-primary-600 100%);\n    }\n  }\n\n  // also hide material dialogs while import is in progress\n  &.isDataImportInProgress {\n    .cdk-overlay-container {\n      display: none !important;\n    }\n  }\n}\n\n.page-wrapper {\n  padding: $s $s $s * 9;\n  @include mq(xs) {\n    padding: $s 2 * $s $s * 9;\n  }\n}\n\n.component-wrapper {\n  max-width: $component-max-width;\n  margin: auto;\n}\n\n.task-list-wrapper {\n  padding: 0 0 $s * 7;\n  // for a little bit of extra space for 800 width\n  max-width: #{$component-max-width - 40};\n  margin: auto;\n\n  @include mq(xxs) {\n    padding: 0 $s * 1 $s * 7;\n  }\n\n  @include mq(xs) {\n    padding: 0 $s * 1.5 $s * 7;\n  }\n\n  @include mq(sm) {\n    padding: 0 3 * $s $s * 7;\n    max-width: $component-max-width;\n  }\n\n  @include mq(lg) {\n    padding: 0 3 * $s $s * 7;\n    max-width: $component-max-width + 100;\n  }\n\n  improvement-banner + & {\n    padding-top: 0;\n  }\n}\n\nblockquote {\n  border-left: 4px solid rgba(var(--palette-accent-500), 1);\n  margin: 20px 0;\n  padding: 1px 20px;\n}\n\na[href] {\n  color: $c-accent;\n}\n\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n}\n\n// make images responsive per default\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n","@mixin mq($size, $type: min) {\n  $f: 0;\n  @if ($type == max) {\n    $f: -1;\n  }\n\n  $width: map-get((\n    'xxs' : $layout-xxs,\n    'xs' : $layout-xs,\n    'sm' : $layout-sm,\n    'md' : $layout-md,\n    'lg' : $layout-lg,\n    'xl' : $layout-xl,\n    'component' : $component-max-width,\n  ), $size);\n\n  @if ($width) {\n    @media screen and ($type + -width: $width  + $f) {\n      @content;\n    }\n  } @else {\n    @error 'Invalid size for mq';\n  }\n}\n","@import 'mixins/media-queries';\n\n.center-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n  text-align: center;\n}\n\n.align-right {\n  text-align: right;\n}\n\n.mw {\n  max-width: $component-max-width;\n  margin: auto;\n}\n\n[hidden] {\n  visibility: hidden;\n}\n\n.hide-xs {\n  @include mq(xs, max) {\n    display: none !important;\n  }\n}\n\n.show-only-on-touch-primary {\n  .isMousePrimary & {\n    display: none !important;\n  }\n}\n\n.show-only-on-mouse-primary {\n  .isTouchPrimary & {\n    display: none !important;\n  }\n}\n\n.show-only-on-touch-only {\n  .isNoTouchOnly & {\n    display: none !important;\n  }\n}\n\n.show-only-on-no-touch-only {\n  .isTouchOnly & {\n    display: none !important;\n  }\n}\n\n.show-xs-only {\n  @include mq(xs) {\n    display: none !important;\n  }\n}\n\n.hide-gt-sm {\n  @include mq(sm, max) {\n    display: none !important;\n  }\n}\n\n.show-xs-only {\n  @include mq(xs) {\n    display: none !important;\n  }\n}\n\n.show-gt-sm-only {\n  @include mq(sm) {\n    display: none !important;\n  }\n}\n\n.isWebVersion .isHideForWebVersion {\n  display: none !important;\n}\n\n.isElectron .isHideForElectron {\n  display: none !important;\n}\n\n.isNoAdvancedFeatures .isHideForNoAdvancedFeatures {\n  display: none !important;\n}\n\n.isAdvancedFeatures .isHideForAdvancedFeatures {\n  display: none !important;\n}\n","/* in-flight clone */\n.gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  //opacity: 0.8;\n  pointer-events: none;\n}\n\n/* high-performance display:none; helper */\n.gu-hide {\n  left: -9999px !important;\n}\n\n/* added to mirrorContainer (default = body) while dragging */\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n\n/* added to the source element while its mirror is dragged */\n.gu-transit {\n  opacity: 0.2;\n}\n","@mixin _scrollBarStyles() {\n  scrollbar-color: #888 #f1f1f1;\n  scrollbar-width: 4px;\n\n  ::-webkit-scrollbar {\n    width: 4px;\n    height: 4px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 4px;\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 16px;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n\n  &.isDarkTheme {\n    scrollbar-color: #333 #222;\n\n    ::-webkit-scrollbar-track {\n      background: #222;\n      border-radius: 4px;\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n      background: rgb(74, 74, 74);\n      border-radius: 16px;\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n      background: #444;\n    }\n  }\n}\n\n@include mq(xs) {\n  .isNoMac {\n    @include _scrollBarStyles;\n  }\n}\n\n@include mq(xs, max) {\n  .isNoTouchOnly {\n    @include _scrollBarStyles;\n  }\n}\n","table {\n  @include mq(xs) {\n    th,\n    td {\n      padding: 0 $s;\n    }\n\n    th,\n    td {\n      &:first-child {\n        padding-left: 0;\n      }\n    }\n    th,\n    td {\n      &:last-child {\n        padding-right: 0;\n      }\n    }\n  }\n}\n\n.table-wrapper {\n  overflow: auto;\n  border-radius: $card-border-radius;\n}\n\n$this-table-min-height: $s * 2;\n$this-table-shadow: $whiteframe-shadow-1dp;\ndiv.material-table {\n  box-shadow: $this-table-shadow;\n  border-radius: $card-border-radius;\n\n  table {\n    width: 100%;\n    box-shadow: none;\n  }\n}\n\ntable.material-table,\ndiv.material-table {\n  box-shadow: $this-table-shadow;\n  font-size: 13px;\n  white-space: nowrap;\n  background-color: #fff;\n\n  &,\n  * {\n    user-select: text;\n    -webkit-touch-callout: default;\n  }\n\n  &._no-elevation {\n    box-shadow: none;\n    background-color: transparent;\n  }\n\n  &,\n  table {\n    border-collapse: collapse;\n  }\n\n  .isDarkTheme & {\n    background: $dark-theme-card-bg;\n    // NOTE: because we're on a lighter background\n    color: $dark-theme-text-color;\n  }\n\n  .isDarkTheme &._no-elevation {\n    background-color: transparent;\n  }\n\n  tr {\n    min-height: $this-table-min-height;\n  }\n\n  th,\n  td {\n    vertical-align: middle;\n    min-height: $this-table-min-height;\n    position: relative;\n    border-top: 1px solid;\n    border-bottom: 1px solid;\n    padding: $s $s * 2.25;\n    box-sizing: border-box;\n    text-align: left;\n\n    .isLightTheme & {\n      border-color: $light-theme-extra-border-color;\n    }\n\n    .isDarkTheme & {\n      border-color: $dark-theme-extra-border-color;\n    }\n\n    &:first-of-type {\n      padding-left: $s * 3;\n    }\n\n    &:last-of-type {\n      padding-right: $s * 3;\n    }\n  }\n\n  tr {\n    &:first-of-type {\n      th,\n      td {\n        border-top-width: 0;\n      }\n    }\n\n    &:last-of-type {\n      th,\n      td {\n        border-bottom-width: 0;\n      }\n    }\n  }\n}\n","$shadow-key-umbra-opacity: 0.2 !default;\n$shadow-key-penumbra-opacity: 0.14 !default;\n$shadow-ambient-shadow-opacity: 0.12 !default;\n\n$whiteframe-shadow-1dp: 0px 1px 3px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 1px 1px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 1px -1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-2dp: 0px 1px 5px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 2px 2px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 1px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-3dp: 0px 1px 8px 0px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 3px 4px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 3px -2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-4dp: 0px 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 4px 5px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 10px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-5dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 5px 8px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 14px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-6dp: 0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 6px 10px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 18px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-7dp: 0px 4px 5px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 7px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 16px 1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-8dp: 0px 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-9dp: 0px 5px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 9px 12px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 16px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-10dp: 0px 6px 6px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 10px 14px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 18px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-11dp: 0px 6px 7px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 11px 15px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 4px 20px 3px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-12dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 12px 17px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 22px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-13dp: 0px 7px 8px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 13px 19px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 24px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-14dp: 0px 7px 9px -4px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 14px 21px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 5px 26px 4px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-15dp: 0px 8px 9px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 15px 22px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 28px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-16dp: 0px 8px 10px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 16px 24px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 30px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-17dp: 0px 8px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 17px 26px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 6px 32px 5px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-18dp: 0px 9px 11px -5px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 18px 28px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 34px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-19dp: 0px 9px 12px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 19px 29px 2px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 7px 36px 6px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-20dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 20px 31px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 38px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-21dp: 0px 10px 13px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 21px 33px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 40px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-22dp: 0px 10px 14px -6px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 22px 35px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 8px 42px 7px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-23dp: 0px 11px 14px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 23px 36px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 44px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n$whiteframe-shadow-24dp: 0px 11px 15px -7px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 24px 38px 3px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 9px 46px 8px rgba(0, 0, 0, $shadow-ambient-shadow-opacity) !default;\n\n\n$header-inset-shadow: inset 0 -4px 4px rgba(0, 0, 0, $shadow-key-umbra-opacity);\n$shadow-card-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2), 0 2px 2px 0 rgba(0, 0, 0, .14), 0 1px 5px 0 rgba(0, 0, 0, .12);\n$shadow-bottom: 0 10px 6px -6px rgba(0, 0, 0, .3);\n$shadow-bottom-boxed: #{$shadow-bottom}, 0 0 1px rgba(0, 0, 0, .3);\n","@import '../../variables';\n\n$particles: 30;\n$width: 500;\n$height: 500;\n\n// Create the explosion...\n$box-shadow: ();\n$box-shadow2: ();\n@for $i from 0 through $particles {\n  $box-shadow: $box-shadow,\n    random($width)-$width *\n      0.5 +\n      px\n      random($height) -\n      $height *\n      0.8333 +\n      px\n      hsl(random(360%), 100%, 50%);\n  $box-shadow2: $box-shadow2, 0 0 #fff;\n}\n\n.pyro {\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  animation-delay: 5s;\n  animation: 0.4s fadeIn ease-in forwards;\n\n  > .pyro-before,\n  > .pyro-after {\n    position: absolute;\n    width: 5px;\n    height: 5px;\n    //border-radius: 50%;\n    box-shadow: $box-shadow2;\n    animation: 1s bang ease-out infinite backwards, 1s gravity ease-in infinite backwards,\n      5s position linear infinite backwards;\n    opacity: 0;\n  }\n\n  > .pyro-after {\n    animation-delay: 1.25s, 1.25s, 1.25s;\n    animation-duration: 1.25s, 1.25s, 6.25s;\n  }\n}\n\n@keyframes bang {\n  to {\n    box-shadow: $box-shadow;\n  }\n}\n\n@keyframes gravity {\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    opacity: 1;\n  }\n\n  100% {\n    transform: translateY(200px);\n    opacity: 0;\n  }\n}\n\n@keyframes position {\n  0%,\n  19.9% {\n    margin-top: 10%;\n    margin-left: 40%;\n  }\n  20%,\n  39.9% {\n    margin-top: 40%;\n    margin-left: 30%;\n  }\n  40%,\n  59.9% {\n    margin-top: 20%;\n    margin-left: 70%;\n  }\n  60%,\n  79.9% {\n    margin-top: 30%;\n    margin-left: 20%;\n  }\n  80%,\n  99.9% {\n    margin-top: 30%;\n    margin-left: 80%;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  1% {\n    visibility: visible;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n",".markdown-preview,\n.markdown {\n  @include scrollY;\n  word-wrap: break-word;\n  word-break: break-word;\n  overflow-wrap: break-word;\n  hyphens: auto;\n\n  *:first-child {\n    margin-top: 0;\n    padding-top: 0;\n  }\n\n  img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n  }\n\n  ul {\n    margin: 0 $s;\n    padding-left: $s * 2;\n    padding-inline-start: 20px;\n  }\n\n  > ul {\n    padding-left: $s * 2;\n  }\n\n  ul ul {\n    padding-top: 0;\n    padding-left: $s * 2;\n    padding-inline-start: $s * 2;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    line-height: 1;\n    margin-top: 16px;\n  }\n\n  h1,\n  h2,\n  h3 {\n    &,\n    .mat-typography & {\n      margin-bottom: $s;\n      margin-top: $s * 2;\n\n      &:first-child {\n        margin-top: 0;\n        padding-top: 0;\n      }\n    }\n  }\n\n  h1 {\n    font-size: 22px;\n    line-height: 24px;\n  }\n\n  h2 {\n    font-size: 18px;\n    line-height: 22px;\n  }\n\n  pre {\n    max-width: 100%;\n    overflow-x: auto;\n    // we need this, otherwise it might break inside tables\n    white-space: pre-wrap;\n\n    code {\n      font-size: 12px;\n    }\n  }\n\n  input[type='checkbox'] {\n    margin-left: -20px;\n    pointer-events: none;\n  }\n\n  .checkbox {\n    display: inline-block;\n    font-size: 20px;\n    width: 20px;\n    line-height: 1;\n    text-align: center;\n    margin-left: -28px;\n    vertical-align: middle;\n    margin-right: $s;\n  }\n\n  .checkbox-wrapper {\n    list-style: none;\n    margin-bottom: $s;\n  }\n}\n","@import 'media-queries';\n\n@mixin scroll() {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n}\n\n@mixin scrollY() {\n  -webkit-overflow-scrolling: touch;\n  overflow-y: auto;\n  // important for touch events like hammer swipe to work\n  touch-action: pan-y;\n}\n\n@mixin scrollYImportant() {\n  -webkit-overflow-scrolling: touch;\n  overflow-x: hidden;\n  overflow-y: auto !important;\n  // important for touch events like hammer swipe to work\n  touch-action: pan-y;\n}\n",".backdrop {\n  display: block;\n  opacity: 1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: fixed;\n  z-index: $z-backdrop;\n\n  @include lightTheme(true) {\n    background-color: $c-backdrop-light-theme;\n  }\n  @include darkTheme(true) {\n    background-color: $c-backdrop-dark-theme;\n  }\n}\n","@mixin darkTheme($is-global: false) {\n  $sel: #{&};\n  @if ($is-global) {\n    .isDarkTheme & {\n      @content;\n    }\n  } @else if ($sel and $sel ==':host') {\n    @at-root  :host-context(.isDarkTheme) {\n      @content;\n    }\n  } @else if ($sel and $sel !='') {\n    @at-root  :host-context(.isDarkTheme) & {\n      @content;\n    }\n  } @else {\n    :host-context(.isDarkTheme) {\n      @content;\n    }\n  }\n}\n\n@mixin lightTheme($is-global: false) {\n  $sel: #{&};\n  @if ($is-global) {\n    .isLightTheme & {\n      @content;\n    }\n  } @else if ($sel and $sel ==':host') {\n    @at-root  :host-context(.isLightTheme) {\n      @content;\n    }\n  } @else if ($sel and $sel !='') {\n    @at-root  :host-context(.isLightTheme) & {\n      @content;\n    }\n  } @else {\n    :host-context(.isLightTheme) {\n      @content;\n    }\n  }\n}\n\n@mixin standardThemeTextColor {\n  @include darkTheme() {\n    color: $dark-theme-text-color;\n  }\n  @include lightTheme() {\n    color: $light-theme-text-color;\n  }\n}\n\n\n@mixin standardThemeTextColorLessIntense {\n  @include darkTheme() {\n    color: $dark-theme-text-color-less-intense;\n  }\n  @include lightTheme() {\n    color: $light-theme-text-color-less-intense;\n  }\n}\n\n\n@mixin standardThemeTextColorMostIntense {\n  @include darkTheme() {\n    color: $dark-theme-text-color-most-intense;\n  }\n  @include lightTheme() {\n    color: $light-theme-text-color-most-intense;\n  }\n}\n\n\n@mixin extraBorder($sideSuffix:'') {\n  @include darkTheme {\n    #{'border'+$sideSuffix}: 1px solid $dark-theme-extra-border-color;\n  }\n  @include lightTheme {\n    #{'border'+$sideSuffix}: 1px solid $light-theme-extra-border-color;\n  }\n}\n\n// e.g. cards and tasks\n@mixin layerTextAndBgHigher {\n  @include darkTheme() {\n    color: $dark-theme-text-color-less-intense;\n    background-color: $dark-theme-bg-lighter;\n  }\n  @include lightTheme() {\n    color: $light-theme-text-color-less-intense;\n  }\n}\n\n\n// e.g. nested cards / tabs etc\n@mixin layerTextAndBgHighest {\n  @include darkTheme() {\n    // NOTE: needs to be more intense than light color, because we have a lighter background\n    color: $dark-theme-text-color-more-intense;\n    background-color: $dark-theme-bg-lightest;\n  }\n  @include lightTheme() {\n    color: $light-theme-text-color-less-intense;\n  }\n}\n\n@mixin dividerBorderColor($border-width: 0 0 1px 0, $is-global: false) {\n  border-style: solid;\n  border-width: $border-width;\n\n  @include lightTheme($is-global) {\n    border-color: rgba(var(--palette-foreground-divider), var(--palette-foreground-divider-alpha, 1));\n  }\n  @include darkTheme($is-global) {\n    border-color: rgba(255, 255, 255, 0.12);\n  }\n}\n\n@mixin flatBox($is-global: false) {\n  @include dividerBorderColor(1px, $is-global);\n}\n","@import '../../variables';\n\n.formly-row {\n  @include mq(xs) {\n    display: flex;\n\n    > * {\n      width: 100%;\n      margin-left: $s * 2;\n\n      &:first-child {\n        margin-left: 0;\n      }\n    }\n  }\n}\n","::-webkit-calendar-picker-indicator {\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  margin: 0;\n  padding: 0;\n}\n\n.isDarkTheme ::-webkit-calendar-picker-indicator {\n  filter: invert(1);\n}\n","@import '../../variables';\n\n.issue-table {\n  width: 100%;\n  display: block;\n  text-align: left;\n\n  pre {\n    overflow: auto;\n    border: 1px dashed $light-theme-extra-border-color;\n    padding: $s;\n  }\n\n  tr {\n    display: flex;\n    flex-wrap: wrap;\n    margin-bottom: $s * 1.5;\n  }\n\n  td,\n  th {\n    vertical-align: top;\n    padding-bottom: $s;\n    display: block;\n\n    &:first-child {\n      padding-left: 0;\n    }\n  }\n\n  th {\n    min-width: 80px;\n    padding-left: 12px;\n    text-align: left;\n    font-style: italic;\n  }\n\n  // to shrink the th col to a min\n  td {\n    overflow-wrap: break-word;\n    word-wrap: break-word;\n    word-break: break-word;\n    hyphens: auto;\n    padding-left: 0;\n\n    &,\n    *,\n    .markdown * {\n      user-select: text;\n    }\n\n    ::ng-deep img,\n    img {\n      max-width: 100%;\n      height: auto;\n      display: block;\n    }\n  }\n}\n","[enlarge-image] {\n  cursor: zoom-in;\n}\n\n.enlarged-image-wrapper {\n  position: fixed;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  cursor: zoom-out;\n  display: flex; /* establish flex container */\n  flex-direction: column; /* make main axis vertical */\n  justify-content: center; /* center items vertically, in this case */\n  align-items: center; /* center items horizontally, in this case */\n  //background: rgba(0, 0, 0, 0.2);\n  animation: $transition-standard fadeIn;\n  z-index: $z-backdrop;\n\n  &.ani-enter {\n    background: transparent;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    opacity: 0;\n\n    @include lightTheme(true) {\n      background-color: $c-backdrop-light-theme;\n    }\n    @include darkTheme(true) {\n      background-color: $c-backdrop-dark-theme;\n    }\n  }\n\n  &.ani-enter,\n  &.ani-enter:after {\n    transition: $transition-enter;\n  }\n\n  &.ani-leave,\n  &.ani-leave:after {\n    transition: $transition-leave;\n  }\n\n  &.ani-enter:after {\n    opacity: 1;\n  }\n\n  &.ani-remove:after {\n    opacity: 0;\n  }\n}\n\n.enlarged-image {\n  z-index: 10;\n  user-select: none;\n  -webkit-user-select: none; /* Safari */\n  max-width: 100%;\n  max-height: 100%;\n  transform-origin: top left;\n  position: relative;\n  opacity: 0.5;\n  user-drag: none;\n  -webkit-user-drag: none;\n  -khtml-user-drag: none;\n  -moz-user-drag: none;\n  -o-user-drag: none;\n  box-shadow: $whiteframe-shadow-5dp;\n\n  &:hover {\n    cursor: zoom-in;\n  }\n\n  .isZoomed &:hover {\n    cursor: zoom-out;\n  }\n\n  .ani-enter & {\n    opacity: 1;\n    transition: $transition-enter;\n  }\n\n  .ani-remove & {\n    transition: $transition-leave;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n","@import '../../variables';\n\n$owl-accent-color: $c-primary;\n$owl-accent-contrast-color: $c-contrast;\n$owl-bg: transparent;\n$owl-shadow: none;\n$owl-today-not-selected: $c-primary;\n\n// dark theme\n$owl-dark-text-color-strong: rgba(255, 255, 255, 0.9);\n$owl-dark-text-color: rgba(255, 255, 255, 0.75);\n$owl-dark-text-color-less-intense: rgba(255, 255, 255, 0.5);\n$owl-dark-text-color-muted: rgba(255, 255, 255, 0.15);\n\n$owl-dark-light-selected-bg: rgba(49, 49, 49, 1);\n\n$owl-dark-divider-color: rgba(255, 255, 255, 0.12);\n\n$owl-dark-inp-bg-color: rgba(255, 255, 255, 0.08);\n$owl-dark-inp-fg-color: $owl-dark-text-color-strong;\n$owl-dark-arrow-color: $owl-dark-text-color-strong;\n\n// light (default) theme\n$owl-text-color-strong: rgba(0, 0, 0, 0.9);\n$owl-text-color: rgba(0, 0, 0, 0.75);\n$owl-text-color-less-intense: rgba(0, 0, 0, 0.5);\n$owl-text-color-muted: rgba(0, 0, 0, 0.15);\n\n$owl-light-selected-bg: rgb(238, 238, 238);\n\n$owl-divider-color: rgba(0, 0, 0, 0.12);\n\n$owl-inp-bg-color: rgba(0, 0, 0, 0.04);\n\n$owl-inp-fg-color: $owl-text-color-strong;\n$owl-arrow-color: $owl-text-color-strong;\n\n$owl-missing: $owl-light-selected-bg !default;\n\n.owl-dialog-container {\n  position: relative;\n  pointer-events: auto;\n  box-sizing: border-box;\n  display: block;\n  padding: 1.5em;\n  box-shadow: $owl-shadow;\n  border-radius: 2px;\n  overflow: auto;\n  background: $owl-bg;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  color: $owl-text-color;\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color;\n  }\n}\n\n.owl-dt-container,\n.owl-dt-container * {\n  box-sizing: border-box;\n}\n\n.owl-dt-container {\n  display: block;\n  font-size: 1rem;\n  background: $owl-bg;\n  pointer-events: auto;\n  z-index: 1000;\n}\n\n.owl-dt-container-row {\n  border-bottom: 1px solid $owl-divider-color;\n\n  @include darkTheme(true) {\n    border-color: $owl-dark-divider-color;\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n}\n\n.owl-dt-calendar {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  flex-direction: column;\n  width: 100%;\n}\n\n.owl-dt-calendar-control {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  font-size: 1em;\n  width: 100%;\n  padding: 0.5em;\n  color: $owl-text-color-strong;\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color-strong;\n  }\n\n  .owl-dt-calendar-control-content {\n    -webkit-box-flex: 1;\n    flex: 1 1 auto;\n    display: -webkit-box;\n    display: flex;\n    -webkit-box-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    align-items: center;\n\n    .owl-dt-calendar-control-button {\n      padding: 0 0.8em;\n\n      &:hover {\n        background-color: $owl-missing;\n      }\n    }\n  }\n}\n\n.owl-dt-calendar-main {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  flex-direction: column;\n  -webkit-box-flex: 1;\n  flex: 1 1 auto;\n  padding: 0 0.2em 0.2em;\n  outline: 0;\n}\n\n.owl-dt-calendar-view {\n  display: block;\n  -webkit-box-flex: 1;\n  flex: 1 1 auto;\n}\n\n.owl-dt-calendar-multi-year-view {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n\n  .owl-dt-calendar-table {\n    width: calc(100% - 3em);\n\n    .owl-dt-calendar-header th {\n      padding-bottom: 0.25em;\n    }\n  }\n}\n\n.owl-dt-calendar-table {\n  width: 100%;\n  border-collapse: collapse;\n  border-spacing: 0;\n\n  .owl-dt-calendar-header {\n    color: $owl-text-color-less-intense;\n    border: 0;\n\n    @include darkTheme(true) {\n      color: $owl-dark-text-color-less-intense;\n    }\n\n    .owl-dt-weekdays {\n      th {\n        font-size: 0.7em;\n        font-weight: normal;\n        text-align: center;\n        padding-bottom: 0;\n      }\n    }\n\n    .owl-dt-calendar-table-divider {\n      position: relative;\n      height: 1px;\n      padding-bottom: 0.5em;\n\n      &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 1px;\n        background: $owl-divider-color;\n\n        @include darkTheme(true) {\n          background: $owl-dark-divider-color;\n        }\n      }\n    }\n  }\n\n  .owl-dt-calendar-cell {\n    position: relative;\n    height: 0;\n    line-height: 0;\n    text-align: center;\n    outline: 0;\n    color: $owl-text-color;\n    -webkit-appearance: none;\n    padding-top: 1em;\n    padding-bottom: 1em;\n    -webkit-tap-highlight-color: transparent;\n\n    @include darkTheme(true) {\n      color: $owl-dark-text-color;\n    }\n  }\n\n  .owl-dt-calendar-cell-content {\n    position: absolute;\n    top: 5%;\n    left: 5%;\n    display: -webkit-box;\n    display: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    box-sizing: border-box;\n    width: 90%;\n    height: 90%;\n    font-size: 0.8em;\n    line-height: 1;\n    border: 1px solid transparent;\n    border-radius: 999px;\n    color: inherit;\n    cursor: pointer;\n  }\n\n  .owl-dt-calendar-cell-out {\n    opacity: 0.3;\n  }\n\n  .owl-dt-calendar-cell-today:not(.owl-dt-calendar-cell-selected) {\n    border-color: $owl-today-not-selected;\n  }\n\n  .owl-dt-calendar-cell-selected {\n    color: $owl-accent-contrast-color;\n    background-color: $owl-accent-color;\n\n    &.owl-dt-calendar-cell-today {\n      box-shadow: inset 0 0 0 2px hsla(0, 0%, 100%, 0.85);\n    }\n  }\n\n  .owl-dt-calendar-cell-disabled {\n    cursor: default;\n\n    & > .owl-dt-calendar-cell-content:not(.owl-dt-calendar-cell-selected) {\n      color: $owl-text-color-muted;\n\n      @include darkTheme(true) {\n        color: $owl-dark-text-color-muted;\n      }\n    }\n\n    & > .owl-dt-calendar-cell-content.owl-dt-calendar-cell-selected {\n      opacity: 0.4;\n    }\n\n    & > .owl-dt-calendar-cell-today:not(.owl-dt-calendar-cell-selected) {\n      border-color: $owl-missing;\n    }\n  }\n\n  .owl-dt-calendar-cell-active:focus\n    > .owl-dt-calendar-cell-content:not(.owl-dt-calendar-cell-selected),\n  :not(.owl-dt-calendar-cell-disabled):hover\n    > .owl-dt-calendar-cell-content:not(.owl-dt-calendar-cell-selected) {\n    background-color: $owl-light-selected-bg;\n\n    @include darkTheme(true) {\n      background-color: $owl-dark-light-selected-bg;\n    }\n  }\n\n  .owl-dt-calendar-cell-in-range {\n    background: $owl-missing;\n\n    &.owl-dt-calendar-cell-range-from {\n      border-top-left-radius: 999px;\n      border-bottom-left-radius: 999px;\n    }\n\n    &.owl-dt-calendar-cell-range-to {\n      border-top-right-radius: 999px;\n      border-bottom-right-radius: 999px;\n    }\n  }\n}\n\n.owl-dt-timer {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: center;\n  width: 100%;\n  padding: 0.5em;\n  height: auto;\n  outline: none;\n}\n\n.owl-dt-timer-box {\n  position: relative;\n  display: inline-flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  flex-direction: column;\n  -webkit-box-align: center;\n  align-items: center;\n  width: 50%;\n  height: 100%;\n}\n\n.owl-dt-timer-content {\n  -webkit-box-flex: 1;\n  flex: 1 1 auto;\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n  width: 100%;\n  margin: 0.2em 0;\n\n  .owl-dt-timer-input {\n    display: block;\n    width: 2em;\n    text-align: center;\n    border: 1px solid $owl-divider-color;\n    color: $owl-inp-fg-color;\n    border-radius: 3px;\n    outline: medium none;\n    font-size: 1.2em;\n    padding: 0.2em;\n    background: $owl-inp-bg-color;\n\n    @include darkTheme(true) {\n      border-color: $owl-dark-divider-color;\n      color: $owl-dark-inp-fg-color;\n      background: $owl-dark-inp-bg-color;\n    }\n  }\n}\n\n.owl-dt-timer-divider {\n  display: inline-block;\n  align-self: flex-end;\n  position: absolute;\n  width: 0.6em;\n  color: $owl-text-color-strong;\n  height: 100%;\n  left: -0.3em;\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color-strong;\n  }\n\n  &:before,\n  &:after {\n    content: '';\n    display: inline-block;\n    width: 0.35em;\n    height: 0.35em;\n    position: absolute;\n    left: 50%;\n    border-radius: 50%;\n    -webkit-transform: translateX(-50%);\n    transform: translateX(-50%);\n    background-color: currentColor;\n  }\n\n  &:before {\n    top: 35%;\n  }\n\n  &:after {\n    bottom: 35%;\n  }\n}\n\n.owl-dt-control-button {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: pointer;\n  outline: none;\n  border: none;\n  -webkit-tap-highlight-color: transparent;\n  display: inline-block;\n  white-space: nowrap;\n  text-decoration: none;\n  vertical-align: baseline;\n  margin: 0;\n  padding: 0;\n  background-color: transparent;\n  font-size: 1em;\n  color: inherit;\n\n  .owl-dt-control-button-content {\n    position: relative;\n    display: inline-flex;\n    -webkit-box-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    align-items: center;\n    outline: none;\n  }\n}\n\n.owl-dt-control-period-button {\n  .owl-dt-control-button-content {\n    height: 1.5em;\n    padding: 0 0.5em;\n    border-radius: 3px;\n    -webkit-transition: background-color 100ms linear;\n    transition: background-color 100ms linear;\n  }\n\n  &:hover > .owl-dt-control-button-content {\n    background-color: $owl-light-selected-bg;\n\n    @include darkTheme(true) {\n      background-color: $owl-dark-light-selected-bg;\n    }\n  }\n\n  .owl-dt-control-button-arrow {\n    display: -webkit-box;\n    display: flex;\n    -webkit-box-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    align-items: center;\n    width: 1em;\n    height: 1em;\n    margin: 0.1em;\n    transition: transform 200ms ease;\n    color: $owl-arrow-color;\n    fill: $owl-arrow-color;\n\n    @include darkTheme(true) {\n      color: $owl-dark-arrow-color;\n      fill: $owl-dark-arrow-color;\n    }\n  }\n}\n\n.owl-dt-control-arrow-button {\n  color: $owl-arrow-color;\n\n  @include darkTheme(true) {\n    color: $owl-dark-arrow-color;\n  }\n\n  .owl-dt-control-button-content {\n    padding: 0;\n    border-radius: 50%;\n    width: 1.5em;\n    height: 1.5em;\n  }\n\n  &[disabled] {\n    cursor: default;\n    color: $owl-text-color-muted;\n\n    @include darkTheme(true) {\n      color: $owl-dark-text-color-muted;\n    }\n  }\n\n  svg {\n    width: 50%;\n    height: 50%;\n    fill: currentColor;\n  }\n}\n\n.owl-dt-inline-container,\n.owl-dt-popup-container {\n  position: relative;\n  box-shadow: $owl-shadow;\n\n  .owl-dt-calendar,\n  .owl-dt-timer {\n    width: 100%;\n  }\n\n  .owl-dt-calendar {\n    height: 20.25em;\n  }\n}\n\n.owl-dt-inline-container {\n  .owl-dt-calendar {\n    height: auto;\n  }\n}\n\n.owl-dt-dialog-container {\n  max-height: 95vh;\n  margin: -1.5em;\n\n  .owl-dt-calendar {\n    min-width: 250px;\n    max-width: 750px;\n    max-height: 750px;\n  }\n\n  .owl-dt-timer {\n    max-width: 750px;\n  }\n}\n\n@media all and (orientation: landscape) {\n  .owl-dt-dialog-container {\n    .owl-dt-calendar {\n      width: 58vh;\n      height: 62vh;\n    }\n\n    .owl-dt-timer {\n      width: 58vh;\n    }\n  }\n}\n\n@media all and (orientation: portrait) {\n  .owl-dt-dialog-container {\n  }\n}\n\n.owl-dt-container-buttons {\n  display: -webkit-box;\n  display: flex;\n  width: 100%;\n  height: 2em;\n  color: $owl-accent-color;\n}\n\n.owl-dt-container-control-button {\n  font-size: 1em;\n  width: 50%;\n  height: 100%;\n  border-radius: 0;\n\n  .owl-dt-control-button-content {\n    height: 100%;\n    width: 100%;\n    -webkit-transition: background-color 100ms linear;\n    transition: background-color 100ms linear;\n  }\n\n  &:hover {\n    .owl-dt-control-button-content {\n      background-color: $owl-missing;\n    }\n  }\n}\n\n.owl-dt-container-info {\n  padding: 0 0.5em;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n\n  .owl-dt-container-range {\n    outline: none;\n\n    .owl-dt-container-range-content {\n      display: -webkit-box;\n      display: flex;\n      -webkit-box-pack: justify;\n      justify-content: space-between;\n      padding: 0.5em 0;\n      font-size: 0.8em;\n    }\n\n    &:last-child {\n      border-top: 1px solid $owl-divider-color;\n\n      @include darkTheme(true) {\n        border-color: $owl-dark-divider-color;\n      }\n    }\n  }\n\n  .owl-dt-container-info-active {\n    color: $owl-accent-color;\n  }\n}\n\n.owl-dt-container-disabled,\n.owl-dt-trigger-disabled {\n  opacity: 0.35;\n  filter: Alpha(Opacity=35);\n  background-image: none;\n  cursor: default !important;\n}\n\n.owl-dt-timer-hour12 {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  align-items: center;\n  color: $owl-accent-color;\n\n  .owl-dt-timer-hour12-box {\n    border: 1px solid currentColor;\n    border-radius: 2px;\n    -webkit-transition: background 200ms ease;\n    transition: background 200ms ease;\n\n    .owl-dt-control-button-content {\n      width: 100%;\n      height: 100%;\n      padding: 0.5em;\n    }\n\n    &:focus,\n    &:hover {\n      .owl-dt-control-button-content {\n        background: $owl-accent-color;\n        color: $owl-accent-contrast-color;\n      }\n    }\n  }\n}\n\n.owl-dt-calendar-only-current-month {\n  .owl-dt-calendar-cell-out {\n    visibility: hidden;\n    cursor: default;\n  }\n}\n\n.owl-dt-inline {\n  display: block;\n\n  @include mq(xxs, max) {\n    width: 100vw;\n  }\n}\n\n.owl-dt-control {\n  outline: none;\n  cursor: pointer;\n\n  .owl-dt-control-content {\n    outline: none;\n  }\n\n  &:focus > .owl-dt-control-content {\n    background-color: $owl-missing;\n  }\n\n  &:not(:-moz-focusring):focus > .owl-dt-control-content {\n    box-shadow: none;\n  }\n}\n\n.owl-hidden-accessible {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.owl-header-wrapper {\n  display: flex;\n  border-bottom: 1px solid $owl-divider-color;\n  align-items: stretch;\n\n  @include darkTheme(true) {\n    border-color: $owl-dark-divider-color;\n  }\n\n  > * {\n    flex: 1;\n\n    &:first-child {\n      border-right: 1px solid $owl-divider-color;\n\n      @include darkTheme(true) {\n        border-color: $owl-dark-divider-color;\n      }\n    }\n  }\n}\n\n.owl-dt-schedule {\n  display: flex;\n  flex-direction: column;\n}\n\n.owl-dt-schedule-item {\n  flex: 1;\n  padding: 0 0.5em;\n  font-size: 0.9em;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  width: auto;\n  display: flex;\n  align-items: center;\n  min-height: 36px;\n  border-left: 4px solid transparent;\n  color: $owl-text-color-strong;\n  opacity: 0.9;\n  text-align: left;\n\n  @include mq(xs, max) {\n    padding: 0;\n    min-height: 44px;\n  }\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color-strong;\n  }\n\n  &.isActive {\n    border-color: $c-primary;\n    outline: none;\n    background: $owl-light-selected-bg;\n    opacity: 1;\n\n    @include darkTheme(true) {\n      background: $owl-dark-light-selected-bg;\n    }\n  }\n\n  &:hover {\n    outline: none;\n    background: $owl-light-selected-bg;\n    opacity: 1;\n\n    @include darkTheme(true) {\n      background: $owl-dark-light-selected-bg;\n    }\n  }\n}\n\n$ico-size: 24px;\n$ico-size-real: 20px;\n.owl-dt-schedule-item--icon {\n  margin-right: $s * 0.5;\n  opacity: 0.85;\n  width: $ico-size;\n  height: $ico-size;\n  line-height: $ico-size;\n  text-align: center;\n  position: relative;\n  font-size: 0;\n\n  @include mq(xs, max) {\n    margin-left: $s;\n    margin-right: $s;\n  }\n\n  &:after {\n    font-size: $ico-size-real;\n    font-family: 'Material Icons';\n    content: 'link';\n    -webkit-font-feature-settings: 'liga';\n\n    .owl-dt-schedule-item:first-of-type & {\n      content: 'wb_sunny';\n    }\n\n    .owl-dt-schedule-item:nth-of-type(2) & {\n      content: 'event';\n    }\n\n    .owl-dt-schedule-item:last-of-type & {\n      content: 'event';\n    }\n  }\n}\n\n.owl-top-input {\n  border-bottom: 1px solid $owl-divider-color;\n\n  @include darkTheme(true) {\n    border-color: $owl-dark-divider-color;\n  }\n\n  input {\n    border: none;\n    width: 100%;\n    height: 36px;\n    line-height: 36px;\n    padding: 0 0.5em;\n    color: $owl-inp-fg-color;\n    background: $owl-inp-bg-color;\n\n    @include darkTheme(true) {\n      color: $owl-dark-inp-fg-color;\n      background: $owl-dark-inp-bg-color;\n    }\n  }\n}\n\n.owl-enter-message {\n  position: absolute;\n  top: $s * 0.5;\n  left: 50%;\n  max-width: 96%;\n  width: 280px;\n  font-size: 1em;\n  padding: 0.25em 1em;\n  transform: translate(-50%, 0);\n  border-radius: 4px;\n  z-index: 999;\n  text-align: center;\n  color: $owl-text-color-strong;\n  background: $owl-light-selected-bg;\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color-strong;\n    background: $owl-dark-light-selected-bg;\n  }\n}\n\n.owl-wrap-cal {\n  position: relative;\n}\n\n.owl-mobile-time-inp {\n  border: none;\n  text-align: center;\n  height: 100%;\n  font-size: 1.3em;\n  font-family: inherit;\n  color: $owl-text-color-strong;\n  background: transparent;\n  -webkit-appearance: none;\n  background: none;\n  // NOTE: center for android\n  width: auto;\n\n  @include darkTheme(true) {\n    color: $owl-dark-text-color-strong;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &::-webkit-clear-button {\n    display: none;\n  }\n\n  &::-webkit-calendar-picker-indicator {\n    display: none;\n  }\n}\n\n.owl-dt-calendar-cell-content.owl-dt-calendar-cell-selected {\n  font-weight: bold;\n}\n\n.owl-dt-calendar-cell-active:focus > {\n  .owl-dt-calendar-cell-content.owl-dt-calendar-cell-selected {\n    color: $owl-text-color-strong;\n    background: $owl-light-selected-bg;\n\n    &.owl-dt-calendar-cell-today {\n      border-color: $owl-accent-color;\n    }\n\n    @include darkTheme(true) {\n      color: $owl-dark-text-color-strong;\n      background: $owl-dark-light-selected-bg;\n    }\n  }\n}\n","// DIALOGS\nbody .mat-dialog-content {\n  overflow: auto;\n}\n\n.big {\n  height: auto;\n  max-height: 100vh !important;\n  // mobile viewport bug fix\n  max-height: -webkit-fill-available;\n  width: 100% !important;\n  max-width: none !important;\n  @include mq(xs) {\n    margin: $s * 2;\n    max-height: 95vh !important;\n  }\n\n  .dialog-content,\n  .mat-dialog-content {\n    max-height: 100%;\n  }\n}\n\n.cdk-overlay-pane {\n  @include mq(xs, max) {\n    max-width: 100vw !important;\n  }\n}\n\n// overwrite mat typography\n.mat-dialog-title.mat-dialog-title {\n  font: 500 20px/32px Roboto, 'Helvetica Neue', sans-serif;\n}\n\n// NOTE: not really an overwrite but helpful\n.dialog-header-icon {\n  vertical-align: middle;\n  margin-right: 8px;\n\n  + span {\n    vertical-align: middle;\n    display: inline-block;\n  }\n}\n\n.dialog-help-wrapper {\n  position: relative;\n\n  .help-btn {\n    margin-top: 3px;\n  }\n}\n\n// SNACK\n// -----\n.mat-snack-bar-container.mat-snack-bar-container.mat-snack-bar-container {\n  padding: 0 16px !important;\n  pointer-events: all;\n  min-height: 48px;\n  width: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nbody .mat-snack-bar-handset {\n  pointer-events: none;\n}\n\nbody .mat-form-field {\n  display: block;\n}\n\n.polling-snack {\n  &.mat-snack-bar-container.mat-snack-bar-container.mat-snack-bar-container {\n    padding-bottom: 8px;\n  }\n}\n\n// FORMS\n// -----\n.mat-checkbox-layout {\n  white-space: normal !important;\n}\n\n// TODO remove TMP fix for https://github.com/angular/components/pull/18467\n.mat-checkbox-checked .mat-checkbox-background {\n  background-color: rgba(var(--palette-accent-500), 1);\n}\n\n// BUTTONS\n// -------\n.mat-button-base,\n.mat-button {\n  overflow: hidden !important;\n  text-overflow: ellipsis !important;\n  max-width: 100%;\n}\n\n.mat-flat-button,\n.mat-stroked-button,\n.mat-raised-button,\n.mat-button {\n  text-transform: uppercase;\n  min-height: 36px;\n  align-items: center;\n}\n\n.mat-button-wrapper,\n.mat-button-wrapper > .mat-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n}\n\n// otherwise it's hard to see when an off-screen element gets focused via tab\n.mat-flat-button.mat-primary:focus {\n  &:after {\n    content: '';\n    position: absolute;\n    border: 2px solid $c-primary-300;\n    left: 0;\n    bottom: 0;\n    top: 0;\n    right: 0;\n    pointer-events: none;\n  }\n}\n\n.mat-form-field:not(.mat-form-field-appearance-legacy)\n  .mat-form-field-prefix\n  .mat-icon-button,\n.mat-form-field:not(.mat-form-field-appearance-legacy)\n  .mat-form-field-suffix\n  .mat-icon-button {\n  width: 2.5em;\n  height: 2.5em;\n\n  mat-icon {\n    font-size: 24px;\n  }\n}\n\n// CARD BG\n.isDarkTheme .mat-card {\n  background: $dark-theme-card-bg;\n}\n\n.mat-card {\n  box-shadow: none;\n\n  @include flatBox(true);\n}\n\n// HEADINGS\nbody .mat-h1 {\n  margin-top: $s * 1.5;\n}\n\n// BACKDROP FIX\n.mat-drawer-backdrop.mat-drawer-backdrop.mat-drawer-backdrop {\n  @include lightTheme(true) {\n    background-color: $c-backdrop-light-theme;\n  }\n  @include darkTheme(true) {\n    // NOTE: we use the light theme backdrop as a light backdrop doesn't make too much sense\n    background-color: $c-backdrop-light-theme;\n  }\n}\n\n// AUTOCOMPLETE\nmat-option .mat-option-text > * {\n  vertical-align: middle;\n}\n\n// SELECT\n// to make it fit monday-sunday\n.mat-select-panel {\n  //max-height: fit-content !important;\n}\n","@import '../../variables';\n/* You can add global styles to this file, and also import other style files */\n@-webkit-keyframes three-quarters {\n  0% {\n    -webkit-transform: rotate(0deg);\n    -moz-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  100% {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -o-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@-moz-keyframes three-quarters {\n  0% {\n    -webkit-transform: rotate(0deg);\n    -moz-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  100% {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -o-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@-o-keyframes three-quarters {\n  0% {\n    -webkit-transform: rotate(0deg);\n    -moz-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  100% {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -o-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes three-quarters {\n  0% {\n    -webkit-transform: rotate(0deg);\n    -moz-transform: rotate(0deg);\n    -ms-transform: rotate(0deg);\n    -o-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  100% {\n    -webkit-transform: rotate(360deg);\n    -moz-transform: rotate(360deg);\n    -ms-transform: rotate(360deg);\n    -o-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n/* Styles for old versions of IE */\nbutton .btn-spinner {\n  font-family: sans-serif;\n  -webkit-animation: three-quarters 1250ms infinite linear;\n  -moz-animation: three-quarters 1250ms infinite linear;\n  -ms-animation: three-quarters 1250ms infinite linear;\n  -o-animation: three-quarters 1250ms infinite linear;\n  animation: three-quarters 1250ms infinite linear;\n  border: 3px solid $c-accent;\n  border-right-color: transparent;\n  border-radius: 100%;\n  box-sizing: border-box;\n  display: inline-block;\n  position: relative;\n  vertical-align: middle;\n  overflow: hidden;\n  text-indent: -9999px;\n  width: 18px;\n  height: 18px;\n}\n\nbutton .btn-spinner:not(:required) {\n  margin-left: -22px;\n  opacity: 0;\n  transition: 0.4s margin ease-out, 0.2s opacity ease-out;\n}\n\nbutton.is-loading .btn-spinner {\n  transition: 0.2s margin ease-in, 0.4s opacity ease-in;\n  margin-left: 5px;\n  opacity: 1;\n}\n",".global-error-alert {\n  position: fixed;\n  min-width: 300px;\n  border: 8px solid red;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9999999999999;\n  text-align: center;\n  padding: 20px;\n  background: #fff;\n  max-width: 90%;\n  overflow: auto;\n  user-select: auto;\n  -webkit-touch-callout: default;\n\n  pre {\n    font-size: 14px;\n    max-width: 100%;\n    white-space: normal;\n  }\n\n  button {\n    font-size: 20px;\n  }\n}\n",".wrap-buttons {\n  display: flex;\n  max-width: 100%;\n  justify-content: flex-end;\n  flex: 1;\n}\n","//@import \"~shepherd.js/dist/css/shepherd.css\";\n\n.shepherd-modal-overlay-container {\n  display: none;\n}\n\n.shepherd-highlight {\n  outline: 3px dotted $c-accent !important;\n}\n\n.shepherd-highlight-inner {\n  border: 3px dotted $c-accent !important;\n}\n\n.shepherd-text kbd {\n  background-color: #eee;\n  border-radius: 3px;\n  border: 1px solid #b4b4b4;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset;\n  color: #333;\n  display: inline-block;\n  font-size: 0.85em;\n  font-weight: 700;\n  line-height: 1;\n  padding: 2px 4px;\n  white-space: nowrap;\n}\n\n.shepherd-nav-list {\n  li {\n    margin-bottom: $s;\n  }\n\n  a {\n    font-weight: bold;\n  }\n}\n\n.shepherd-header {\n  h3 {\n    margin: 0;\n    font-weight: bold;\n  }\n}\n\n.shepherd-element[data-popper-reference-hidden]:not(.shepherd-centered) {\n  opacity: 1 !important;\n  visibility: visible !important;\n}\n\n.shepherd-colored-border {\n  border: 1px solid $c-primary;\n  padding: 0 4px;\n  color: $c-primary;\n  font-weight: bold;\n  border-radius: 4px;\n}\n\n.shepherd-title,\n.shepherd-text {\n  font-size: 16px;\n  line-height: 1.5;\n  @include darkTheme(true) {\n    color: $dark-theme-text-color;\n  }\n}\n\n.shepherd-header {\n  padding: $s 1rem !important;\n  //background: transparent !important;\n  @include darkTheme(true) {\n    background: $dark8 !important;\n  }\n}\n\n.shepherd-element {\n  border-radius: 8px;\n  box-shadow: $whiteframe-shadow-24dp;\n  z-index: $z-tour;\n  background: #fff;\n  max-width: 400px;\n  opacity: 0;\n  outline: none;\n  transition: opacity 0.3s, visibility 0.3s;\n  visibility: hidden;\n  width: 100%;\n\n  @include darkTheme(true) {\n    background: $dark24 !important;\n  }\n\n  .material-icons {\n    vertical-align: middle;\n  }\n}\n\n.shepherd-arrow:before {\n  @include darkTheme(true) {\n    background: $dark24 !important;\n  }\n}\n\n.shepherd-footer button + button {\n  margin-left: 4px;\n}\n\n// BASE\n// ----\n// @import \"~shepherd.js/dist/css/shepherd.css\";\n\n.shepherd-button:disabled {\n  cursor: not-allowed;\n}\n\n.shepherd-footer {\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  display: flex;\n  justify-content: flex-end;\n  padding: 0 0.75rem 0.75rem;\n}\n\n.shepherd-footer .shepherd-button:last-child {\n  margin-right: 0;\n}\n\n.shepherd-header {\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  line-height: 2em;\n  padding: 0.75rem 0.75rem 0;\n}\n\n.shepherd-has-title .shepherd-content .shepherd-header {\n  background: #e6e6e6;\n  padding: 1em;\n}\n\n.shepherd-text {\n  padding: 0.75em;\n}\n\n.shepherd-text p {\n  margin-top: 0;\n}\n\n.shepherd-text p:last-child {\n  margin-bottom: 0;\n}\n\n.shepherd-enabled.shepherd-element {\n  opacity: 1;\n  visibility: visible;\n}\n\n.shepherd-element[data-popper-reference-hidden]:not(.shepherd-centered) {\n  opacity: 0;\n  pointer-events: none;\n  visibility: hidden;\n}\n\n.shepherd-element,\n.shepherd-element *,\n.shepherd-element :after,\n.shepherd-element :before {\n  box-sizing: border-box;\n}\n\n.shepherd-arrow,\n.shepherd-arrow:before {\n  height: 16px;\n  position: absolute;\n  width: 16px;\n  z-index: -1;\n}\n\n.shepherd-arrow:before {\n  background: #fff;\n  content: '';\n  transform: rotate(45deg);\n}\n\n.shepherd-element[data-popper-placement^='top'] > .shepherd-arrow {\n  bottom: -8px;\n}\n\n.shepherd-element[data-popper-placement^='bottom'] > .shepherd-arrow {\n  top: -8px;\n}\n\n.shepherd-element[data-popper-placement^='left'] > .shepherd-arrow {\n  right: -8px;\n}\n\n.shepherd-element[data-popper-placement^='right'] > .shepherd-arrow {\n  left: -8px;\n}\n\n.shepherd-element.shepherd-centered > .shepherd-arrow {\n  opacity: 0;\n}\n\n.shepherd-element.shepherd-has-title[data-popper-placement^='bottom']\n  > .shepherd-arrow:before {\n  background-color: #e6e6e6;\n}\n\n.shepherd-target-click-disabled.shepherd-enabled.shepherd-target,\n.shepherd-target-click-disabled.shepherd-enabled.shepherd-target * {\n  pointer-events: none;\n}\n\n//.shepherd-modal-overlay-container {\n//  height: 0;\n//  left: 0;\n//  opacity: 0;\n//  overflow: hidden;\n//  pointer-events: none;\n//  position: fixed;\n//  top: 0;\n//  transition: all .3s ease-out, height 0ms .3s, opacity .3s 0ms;\n//  width: 100vw;\n//  z-index: 9997\n//}\n//\n//.shepherd-modal-overlay-container.shepherd-modal-is-visible {\n//  height: 100vh;\n//  opacity: .5;\n//  transform: translateZ(0);\n//  transition: all .3s ease-out, height 0s 0s, opacity .3s 0s\n//}\n//\n//.shepherd-modal-overlay-container.shepherd-modal-is-visible path {\n//  pointer-events: all\n//}\n"],"mappings":"AACA,WACE,mBACA,kBACA,kBACA,gBACA,+IACA,iFAGF,WACE,mBACA,kBACA,kBACA,gBACA,2IACA,gEAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,6IACA,yGAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,2GAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,yJC5DF,WACE,mBACA,kBACA,kBACA,gBACA,+IACA,iFAGF,WACE,mBACA,kBACA,kBACA,gBACA,2IACA,gEAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,6IACA,yGAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,2GAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,yJC5DF,WACE,mBACA,kBACA,kBACA,gBACA,+IACA,iFAGF,WACE,mBACA,kBACA,kBACA,gBACA,2IACA,gEAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,6IACA,yGAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,2GAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,yJC5DF,WACE,mBACA,kBACA,kBACA,gBACA,+IACA,iFAGF,WACE,mBACA,kBACA,kBACA,gBACA,2IACA,gEAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,0BAGF,WACE,mBACA,kBACA,kBACA,gBACA,6IACA,yGAGF,WACE,mBACA,kBACA,kBACA,gBACA,4IACA,2GAGF,WACE,mBACA,kBACA,kBACA,gBACA,wIACA,yJC1DF,WACE,2BACA,kBACA,gBACA,8HAIF,gBACE,2BACA,gB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","names":[],"sourceRoot":"webpack:///","file":"styles.0ee491e866f4c805.css","x_google_ignoreList":[0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65]}